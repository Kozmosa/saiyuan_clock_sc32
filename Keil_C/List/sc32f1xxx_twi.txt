; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: armcc [4d365d]
; commandline armcc [--c99 --list --split_sections --debug -c --asm --interleave -o..\Output\sc32f1xxx_twi.o --asm_dir=..\List --list_dir=..\List --cpu=Cortex-M0+ --apcs=interwork -O0 -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -DSC32f10xx -D__UVISION_VERSION=536 ..\FWLib\SC32F1XXX_Lib\src\sc32f1xxx_twi.c]
                          THUMB
                          AREA ||i.TWI_AcknowledgeConfig||, CODE, READONLY, ALIGN=2
                  TWI_AcknowledgeConfig PROC
;;;162      */
;;;163    void TWI_AcknowledgeConfig ( TWI_TypeDef* TWIx, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;164    {
;;;165        
;;;166        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;167        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;168        if ( NewState != DISABLE )
000002  d004              BEQ      |L1.14|
;;;169        {
;;;170            
;;;171            TWIx->TWI_CON |= TWI_CON_AA;
000004  6802              LDR      r2,[r0,#0]
000006  2302              MOVS     r3,#2
000008  431a              ORRS     r2,r2,r3
00000a  6002              STR      r2,[r0,#0]
00000c  e003              B        |L1.22|
                  |L1.14|
;;;172        }
;;;173        else
;;;174        {
;;;175            
;;;176            TWIx->TWI_CON &= ( uint16_t ) ~TWI_CON_AA;
00000e  6802              LDR      r2,[r0,#0]
000010  4b01              LDR      r3,|L1.24|
000012  401a              ANDS     r2,r2,r3
000014  6002              STR      r2,[r0,#0]
                  |L1.22|
;;;177        }
;;;178    }
000016  4770              BX       lr
;;;179    
                          ENDP
                  |L1.24|
                          DCD      0x0000fffd
                          AREA ||i.TWI_ClearFlag||, CODE, READONLY, ALIGN=1
                  TWI_ClearFlag PROC
;;;537     */
;;;538    void TWI_ClearFlag ( TWI_TypeDef* TWIx, TWI_FLAG_TypeDef TWI_FLAG )
000000  6842              LDR      r2,[r0,#4]
;;;539    {
;;;540        
;;;541        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;542        
;;;543        TWIx->TWI_STS |= ( uint16_t ) TWI_FLAG;
000002  430a              ORRS     r2,r2,r1
000004  6042              STR      r2,[r0,#4]
;;;544    }
000006  4770              BX       lr
;;;545    
                          ENDP
                          AREA ||i.TWI_Cmd||, CODE, READONLY, ALIGN=2
                  TWI_Cmd PROC
;;;135     */
;;;136    void TWI_Cmd ( TWI_TypeDef* TWIx, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;137    {
;;;138        
;;;139        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;140        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;141        if ( NewState != DISABLE )
000002  d004              BEQ      |L3.14|
;;;142        {
;;;143            
;;;144            TWIx->TWI_CON |= TWI_CON_TWEN;
000004  6802              LDR      r2,[r0,#0]
000006  2380              MOVS     r3,#0x80
000008  431a              ORRS     r2,r2,r3
00000a  6002              STR      r2,[r0,#0]
00000c  e003              B        |L3.22|
                  |L3.14|
;;;145        }
;;;146        else
;;;147        {
;;;148            
;;;149            TWIx->TWI_CON &= ( uint16_t ) ~TWI_CON_TWEN;
00000e  6802              LDR      r2,[r0,#0]
000010  4b01              LDR      r3,|L3.24|
000012  401a              ANDS     r2,r2,r3
000014  6002              STR      r2,[r0,#0]
                  |L3.22|
;;;150        }
;;;151    }
000016  4770              BX       lr
;;;152    
                          ENDP
                  |L3.24|
                          DCD      0x0000ff7f
                          AREA ||i.TWI_DMACmd||, CODE, READONLY, ALIGN=1
                  TWI_DMACmd PROC
;;;585     */
;;;586    void TWI_DMACmd ( TWI_TypeDef* TWIx, TWI_DMAReq_TypeDef TWI_DMAReq, FunctionalState NewState )
000000  b510              PUSH     {r4,lr}
;;;587    {
;;;588        
;;;589        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;590        assert_param ( IS_TWI_DMAREQ ( TWI_DMAReq ) );
;;;591        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;592        if ( NewState != DISABLE )
000002  2a00              CMP      r2,#0
000004  d003              BEQ      |L4.14|
;;;593        {
;;;594            
;;;595            TWIx->TWI_IDE |= TWI_DMAReq;
000006  6903              LDR      r3,[r0,#0x10]
000008  430b              ORRS     r3,r3,r1
00000a  6103              STR      r3,[r0,#0x10]
00000c  e004              B        |L4.24|
                  |L4.14|
;;;596        }
;;;597        else
;;;598        {
;;;599            
;;;600            TWIx->TWI_IDE &= ( uint16_t ) ~TWI_DMAReq;
00000e  6903              LDR      r3,[r0,#0x10]
000010  43cc              MVNS     r4,r1
000012  b2a4              UXTH     r4,r4
000014  4023              ANDS     r3,r3,r4
000016  6103              STR      r3,[r0,#0x10]
                  |L4.24|
;;;601        }
;;;602    }
000018  bd10              POP      {r4,pc}
;;;603    
                          ENDP
                          AREA ||i.TWI_DeInit||, CODE, READONLY, ALIGN=2
                  TWI_DeInit PROC
;;;46      */
;;;47     void TWI_DeInit ( TWI_TypeDef* TWIx )
000000  b510              PUSH     {r4,lr}
;;;48     {
000002  4604              MOV      r4,r0
;;;49         
;;;50         assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;51         if ( TWIx == TWI0 )
000004  480b              LDR      r0,|L5.52|
000006  4284              CMP      r4,r0
000008  d108              BNE      |L5.28|
;;;52         {
;;;53             
;;;54             RCC_APB0PeriphResetCmd ( RCC_APB0Periph_TWI0, ENABLE );
00000a  2101              MOVS     r1,#1
00000c  2010              MOVS     r0,#0x10
00000e  f7fffffe          BL       RCC_APB0PeriphResetCmd
;;;55             
;;;56             RCC_APB0PeriphResetCmd ( RCC_APB0Periph_TWI0, DISABLE );
000012  2100              MOVS     r1,#0
000014  2010              MOVS     r0,#0x10
000016  f7fffffe          BL       RCC_APB0PeriphResetCmd
00001a  e00a              B        |L5.50|
                  |L5.28|
;;;57         }
;;;58         else if ( TWIx == TWI1 )
00001c  4806              LDR      r0,|L5.56|
00001e  4284              CMP      r4,r0
000020  d107              BNE      |L5.50|
;;;59         {
;;;60             
;;;61             RCC_APB1PeriphResetCmd ( RCC_APB1Periph_TWI1, ENABLE );
000022  2101              MOVS     r1,#1
000024  2010              MOVS     r0,#0x10
000026  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;62             
;;;63             RCC_APB1PeriphResetCmd ( RCC_APB1Periph_TWI1, DISABLE );
00002a  2100              MOVS     r1,#0
00002c  2010              MOVS     r0,#0x10
00002e  f7fffffe          BL       RCC_APB1PeriphResetCmd
                  |L5.50|
;;;64         }
;;;65     }
000032  bd10              POP      {r4,pc}
;;;66     
                          ENDP
                  |L5.52|
                          DCD      0x40020060
                  |L5.56|
                          DCD      0x40021060
                          AREA ||i.TWI_GeneralCallCmd||, CODE, READONLY, ALIGN=2
                  TWI_GeneralCallCmd PROC
;;;189      */
;;;190    void TWI_GeneralCallCmd ( TWI_TypeDef* TWIx, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;191    {
;;;192        
;;;193        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;194        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;195        if ( NewState != DISABLE )
000002  d004              BEQ      |L6.14|
;;;196        {
;;;197            
;;;198            TWIx->TWI_ADD |= TWI_ADD_GC;
000004  6882              LDR      r2,[r0,#8]
000006  2301              MOVS     r3,#1
000008  431a              ORRS     r2,r2,r3
00000a  6082              STR      r2,[r0,#8]
00000c  e003              B        |L6.22|
                  |L6.14|
;;;199        }
;;;200        else
;;;201        {
;;;202            
;;;203            TWIx->TWI_ADD &= ( uint16_t ) ~TWI_ADD_GC;
00000e  6882              LDR      r2,[r0,#8]
000010  4b01              LDR      r3,|L6.24|
000012  401a              ANDS     r2,r2,r3
000014  6082              STR      r2,[r0,#8]
                  |L6.22|
;;;204        }
;;;205    }
000016  4770              BX       lr
;;;206    
                          ENDP
                  |L6.24|
                          DCD      0x0000fffe
                          AREA ||i.TWI_GenerateSTART||, CODE, READONLY, ALIGN=2
                  TWI_GenerateSTART PROC
;;;291      */
;;;292    void TWI_GenerateSTART ( TWI_TypeDef* TWIx, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;293    {
;;;294        
;;;295        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;296        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;297        if ( NewState != DISABLE )
000002  d004              BEQ      |L7.14|
;;;298        {
;;;299            
;;;300            TWIx->TWI_CON |= TWI_CON_STA;
000004  6802              LDR      r2,[r0,#0]
000006  2320              MOVS     r3,#0x20
000008  431a              ORRS     r2,r2,r3
00000a  6002              STR      r2,[r0,#0]
00000c  e003              B        |L7.22|
                  |L7.14|
;;;301        }
;;;302        else
;;;303        {
;;;304            
;;;305            TWIx->TWI_CON &= ( uint16_t ) ~TWI_CON_STA;
00000e  6802              LDR      r2,[r0,#0]
000010  4b01              LDR      r3,|L7.24|
000012  401a              ANDS     r2,r2,r3
000014  6002              STR      r2,[r0,#0]
                  |L7.22|
;;;306        }
;;;307    }
000016  4770              BX       lr
;;;308    
                          ENDP
                  |L7.24|
                          DCD      0x0000ffdf
                          AREA ||i.TWI_GenerateSTOP||, CODE, READONLY, ALIGN=2
                  TWI_GenerateSTOP PROC
;;;318      */
;;;319    void TWI_GenerateSTOP ( TWI_TypeDef* TWIx, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;320    {
;;;321        
;;;322        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;323        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;324        if ( NewState != DISABLE )
000002  d004              BEQ      |L8.14|
;;;325        {
;;;326            
;;;327            TWIx->TWI_CON |= TWI_CON_STO;
000004  6802              LDR      r2,[r0,#0]
000006  2310              MOVS     r3,#0x10
000008  431a              ORRS     r2,r2,r3
00000a  6002              STR      r2,[r0,#0]
00000c  e003              B        |L8.22|
                  |L8.14|
;;;328        }
;;;329        else
;;;330        {
;;;331            
;;;332            TWIx->TWI_CON &= ( uint16_t ) ~TWI_CON_STO;
00000e  6802              LDR      r2,[r0,#0]
000010  4b01              LDR      r3,|L8.24|
000012  401a              ANDS     r2,r2,r3
000014  6002              STR      r2,[r0,#0]
                  |L8.22|
;;;333        }
;;;334    }
000016  4770              BX       lr
;;;335    
                          ENDP
                  |L8.24|
                          DCD      0x0000ffef
                          AREA ||i.TWI_GetFlagStatus||, CODE, READONLY, ALIGN=1
                  TWI_GetFlagStatus PROC
;;;508     */
;;;509    FlagStatus TWI_GetFlagStatus ( TWI_TypeDef* TWIx, TWI_FLAG_TypeDef TWI_FLAG )
000000  4602              MOV      r2,r0
;;;510    {
;;;511        ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;512        
;;;513        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;514        assert_param ( IS_TWI_FLAG ( TWI_FLAG ) );
;;;515        if ( ( TWIx->TWI_STS & TWI_FLAG ) != ( uint16_t ) RESET )
000004  6853              LDR      r3,[r2,#4]
000006  400b              ANDS     r3,r3,r1
000008  2b00              CMP      r3,#0
00000a  d001              BEQ      |L9.16|
;;;516        {
;;;517            bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L9.18|
                  |L9.16|
;;;518        }
;;;519        else
;;;520        {
;;;521            bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L9.18|
;;;522        }
;;;523        return bitstatus;
;;;524    }
000012  4770              BX       lr
;;;525    
                          ENDP
                          AREA ||i.TWI_GetNbytes||, CODE, READONLY, ALIGN=1
                  TWI_GetNbytes PROC
;;;257      */
;;;258    uint8_t TWI_GetNbytes ( TWI_TypeDef* TWIx )
000000  4601              MOV      r1,r0
;;;259    {
;;;260        uint8_t tmpnum;
;;;261    
;;;262        
;;;263        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;264    
;;;265        tmpnum = ( uint8_t ) ( TWIx->TWI_STS >> TWI_STS_NBYTES_Pos );
000002  684a              LDR      r2,[r1,#4]
000004  0212              LSLS     r2,r2,#8
000006  0e10              LSRS     r0,r2,#24
;;;266    
;;;267        return tmpnum;
;;;268    }
000008  4770              BX       lr
;;;269    
                          ENDP
                          AREA ||i.TWI_GetStateMachine||, CODE, READONLY, ALIGN=1
                  TWI_GetStateMachine PROC
;;;564     */
;;;565    TWI_StateMachine_TypeDef TWI_GetStateMachine ( TWI_TypeDef* TWIx )
000000  4601              MOV      r1,r0
;;;566    {
;;;567        
;;;568        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;569    
;;;570        return ( TWI_StateMachine_TypeDef ) ( TWIx->TWI_STS & TWI_STS_STATE );
000002  6848              LDR      r0,[r1,#4]
000004  2207              MOVS     r2,#7
000006  0212              LSLS     r2,r2,#8
000008  4010              ANDS     r0,r0,r2
;;;571    }
00000a  4770              BX       lr
;;;572    
                          ENDP
                          AREA ||i.TWI_ITConfig||, CODE, READONLY, ALIGN=1
                  TWI_ITConfig PROC
;;;476     */
;;;477    void TWI_ITConfig ( TWI_TypeDef* TWIx, uint16_t TWI_IT, FunctionalState NewState )
000000  b510              PUSH     {r4,lr}
;;;478    {
;;;479        
;;;480        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;481        assert_param ( IS_TWI_IT ( TWI_IT ) );
;;;482        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;483        if ( NewState != DISABLE )
000002  2a00              CMP      r2,#0
000004  d003              BEQ      |L12.14|
;;;484        {
;;;485            
;;;486            TWIx->TWI_IDE |= TWI_IT;
000006  6903              LDR      r3,[r0,#0x10]
000008  430b              ORRS     r3,r3,r1
00000a  6103              STR      r3,[r0,#0x10]
00000c  e004              B        |L12.24|
                  |L12.14|
;;;487        }
;;;488        else
;;;489        {
;;;490            
;;;491            TWIx->TWI_IDE &= ( uint16_t ) ~TWI_IT;
00000e  6903              LDR      r3,[r0,#0x10]
000010  43cc              MVNS     r4,r1
000012  b2a4              UXTH     r4,r4
000014  4023              ANDS     r3,r3,r4
000016  6103              STR      r3,[r0,#0x10]
                  |L12.24|
;;;492        }
;;;493    }
000018  bd10              POP      {r4,pc}
;;;494    
                          ENDP
                          AREA ||i.TWI_Init||, CODE, READONLY, ALIGN=2
                  TWI_Init PROC
;;;89      */
;;;90     void TWI_Init ( TWI_TypeDef* TWIx, TWI_InitTypeDef* TWI_InitStruct )
000000  b530              PUSH     {r4,r5,lr}
;;;91     {
000002  4602              MOV      r2,r0
;;;92         uint32_t tmpreg;
;;;93         
;;;94         assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;95         assert_param ( IS_TWI_ACK ( TWI_InitStruct->TWI_Ack ) );
;;;96         assert_param ( IS_TWI_PRESCALER ( TWI_InitStruct->TWI_Prescaler ) );
;;;97         assert_param ( IS_TWI_STRETCH ( TWI_InitStruct->TWI_Stretch ) );
;;;98         assert_param ( IS_TWI_GENERALCALL ( TWI_InitStruct->TWI_GeneralCall ) );
;;;99         
;;;100        
;;;101        tmpreg = TWIx->TWI_CON;
000004  6810              LDR      r0,[r2,#0]
;;;102        
;;;103        tmpreg &= ( uint32_t ) ~ ( TWI_CON_AA | TWI_CON_SPOS | TWI_CON_STRETCH );
000006  4b0a              LDR      r3,|L13.48|
000008  4018              ANDS     r0,r0,r3
;;;104        
;;;105        
;;;106        
;;;107        
;;;108        tmpreg |= ( uint32_t ) ( TWI_InitStruct->TWI_Ack | TWI_InitStruct->TWI_Prescaler |
00000a  880b              LDRH     r3,[r1,#0]
00000c  884c              LDRH     r4,[r1,#2]
00000e  4323              ORRS     r3,r3,r4
000010  888c              LDRH     r4,[r1,#4]
000012  4323              ORRS     r3,r3,r4
000014  4318              ORRS     r0,r0,r3
;;;109                                 TWI_InitStruct->TWI_Stretch );
;;;110        
;;;111        TWIx->TWI_CON = tmpreg;
000016  6010              STR      r0,[r2,#0]
;;;112        
;;;113        
;;;114        tmpreg = TWIx->TWI_ADD;
000018  6890              LDR      r0,[r2,#8]
;;;115        
;;;116        tmpreg &= ( uint32_t ) ~ ( TWI_ADD_GC | TWI_ADD_TWA );
00001a  0a00              LSRS     r0,r0,#8
00001c  0200              LSLS     r0,r0,#8
;;;117        
;;;118        
;;;119        
;;;120        tmpreg |= ( uint32_t ) ( TWI_InitStruct->TWI_GeneralCall | ( ( TWI_InitStruct->TWI_SlaveAdress << 1 ) & 0xFE ) );
00001e  88cb              LDRH     r3,[r1,#6]
000020  688c              LDR      r4,[r1,#8]
000022  0064              LSLS     r4,r4,#1
000024  25fe              MOVS     r5,#0xfe
000026  402c              ANDS     r4,r4,r5
000028  4323              ORRS     r3,r3,r4
00002a  4318              ORRS     r0,r0,r3
;;;121    
;;;122        
;;;123        TWIx->TWI_ADD = tmpreg;
00002c  6090              STR      r0,[r2,#8]
;;;124    }
00002e  bd30              POP      {r4,r5,pc}
;;;125    
                          ENDP
                  |L13.48|
                          DCD      0xffff3ffc
                          AREA ||i.TWI_PinRemapConfig||, CODE, READONLY, ALIGN=2
                  TWI_PinRemapConfig PROC
;;;425     */
;;;426    void TWI_PinRemapConfig ( TWI_TypeDef* TWIx, TWI_PinRemap_TypeDef TWI_Remap )
000000  b510              PUSH     {r4,lr}
;;;427    {
000002  460a              MOV      r2,r1
;;;428        uint32_t tmpreg ;
;;;429        
;;;430        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;431        if ( TWIx == TWI0 )
000004  4b07              LDR      r3,|L14.36|
000006  4298              CMP      r0,r3
000008  d100              BNE      |L14.12|
;;;432        {
;;;433            assert_param ( IS_TWI_LIST1_PINREMAP ( TWI_Remap ) );
00000a  e000              B        |L14.14|
                  |L14.12|
;;;434        }
;;;435        else
;;;436        {
;;;437            assert_param ( IS_TWI_LIST2_PINREMAP ( TWI_Remap ) );
00000c  bf00              NOP      
                  |L14.14|
;;;438        }
;;;439    
;;;440        tmpreg = TWIx->TWI_CON;
00000e  6801              LDR      r1,[r0,#0]
;;;441    
;;;442        tmpreg &= ( uint32_t ) ( ~TWI_CON_SPOS );
000010  2403              MOVS     r4,#3
000012  03a4              LSLS     r4,r4,#14
000014  460b              MOV      r3,r1
000016  43a3              BICS     r3,r3,r4
000018  4619              MOV      r1,r3
;;;443    
;;;444        tmpreg |= TWI_Remap;
00001a  460b              MOV      r3,r1
00001c  4313              ORRS     r3,r3,r2
00001e  4619              MOV      r1,r3
;;;445    
;;;446        TWIx->TWI_CON = tmpreg;
000020  6001              STR      r1,[r0,#0]
;;;447    }
000022  bd10              POP      {r4,pc}
;;;448    
                          ENDP
                  |L14.36|
                          DCD      0x40020060
                          AREA ||i.TWI_ReceiveData||, CODE, READONLY, ALIGN=1
                  TWI_ReceiveData PROC
;;;396     */
;;;397    uint16_t TWI_ReceiveData ( TWI_TypeDef* TWIx )
000000  4601              MOV      r1,r0
;;;398    {
;;;399        
;;;400        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;401        
;;;402        return ( uint16_t ) TWIx->TWI_DATA;
000002  68c8              LDR      r0,[r1,#0xc]
000004  b280              UXTH     r0,r0
;;;403    }
000006  4770              BX       lr
;;;404    
                          ENDP
                          AREA ||i.TWI_Send7bitAddress||, CODE, READONLY, ALIGN=1
                  TWI_Send7bitAddress PROC
;;;346      */
;;;347    void TWI_Send7bitAddress ( TWI_TypeDef* TWIx, uint8_t Address, TWI_Command_TypeDef TWI_Command )
000000  064b              LSLS     r3,r1,#25
;;;348    {
;;;349        
;;;350        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;351        assert_param ( IS_TWI_COMMAND ( TWI_Command ) );
;;;352        Address = ( Address << 1 );
000002  0e19              LSRS     r1,r3,#24
;;;353        
;;;354        if ( TWI_Command != TWI_Command_Write )
000004  2a00              CMP      r2,#0
000006  d002              BEQ      |L16.14|
;;;355        {
;;;356            
;;;357            Address |= TWI_Command_Read;
000008  2301              MOVS     r3,#1
00000a  4319              ORRS     r1,r1,r3
00000c  e001              B        |L16.18|
                  |L16.14|
;;;358        }
;;;359        else
;;;360        {
;;;361            
;;;362            Address &= ( uint8_t ) ~ ( ( uint8_t ) TWI_Command_Read );
00000e  23fe              MOVS     r3,#0xfe
000010  4019              ANDS     r1,r1,r3
                  |L16.18|
;;;363        }
;;;364    
;;;365        
;;;366        TWIx->TWI_DATA = Address;
000012  60c1              STR      r1,[r0,#0xc]
;;;367    }
000014  4770              BX       lr
;;;368    
                          ENDP
                          AREA ||i.TWI_SendData||, CODE, READONLY, ALIGN=1
                  TWI_SendData PROC
;;;381     */
;;;382    void TWI_SendData ( TWI_TypeDef* TWIx, uint8_t Data )
000000  60c1              STR      r1,[r0,#0xc]
;;;383    {
;;;384        
;;;385        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;386        
;;;387        TWIx->TWI_DATA = Data;
;;;388    }
000002  4770              BX       lr
;;;389    
                          ENDP
                          AREA ||i.TWI_SetNbytes||, CODE, READONLY, ALIGN=1
                  TWI_SetNbytes PROC
;;;242      */
;;;243    void TWI_SetNbytes ( TWI_TypeDef* TWIx, uint8_t Nbytes )
000000  040a              LSLS     r2,r1,#16
;;;244    {
;;;245        
;;;246        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;247    
;;;248        TWIx->TWI_STS = ( uint32_t ) ( Nbytes << TWI_STS_NBYTES_Pos );
000002  6042              STR      r2,[r0,#4]
;;;249    }
000004  4770              BX       lr
;;;250    
                          ENDP
                          AREA ||i.TWI_StretchClockConfig||, CODE, READONLY, ALIGN=2
                  TWI_StretchClockConfig PROC
;;;216      */
;;;217    void TWI_StretchClockConfig ( TWI_TypeDef* TWIx, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;218    {
;;;219        
;;;220        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;221        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;222        if ( NewState == DISABLE )
000002  d104              BNE      |L19.14|
;;;223        {
;;;224            
;;;225            TWIx->TWI_CON |= TWI_CON_STRETCH;
000004  6802              LDR      r2,[r0,#0]
000006  2301              MOVS     r3,#1
000008  431a              ORRS     r2,r2,r3
00000a  6002              STR      r2,[r0,#0]
00000c  e003              B        |L19.22|
                  |L19.14|
;;;226        }
;;;227        else
;;;228        {
;;;229            
;;;230            TWIx->TWI_CON &= ( uint16_t ) ~ ( ( uint16_t ) TWI_CON_STRETCH );
00000e  6802              LDR      r2,[r0,#0]
000010  4b01              LDR      r3,|L19.24|
000012  401a              ANDS     r2,r2,r3
000014  6002              STR      r2,[r0,#0]
                  |L19.22|
;;;231        }
;;;232    }
000016  4770              BX       lr
;;;233    
                          ENDP
                  |L19.24|
                          DCD      0x0000fffe
                          AREA ||i.TWI_StructInit||, CODE, READONLY, ALIGN=1
                  TWI_StructInit PROC
;;;71       */
;;;72     void TWI_StructInit ( TWI_InitTypeDef* TWI_InitStruct )
000000  2102              MOVS     r1,#2
;;;73     {
;;;74         
;;;75         TWI_InitStruct->TWI_Ack = TWI_Ack_Enable;
000002  8001              STRH     r1,[r0,#0]
;;;76         TWI_InitStruct->TWI_Prescaler = TWI_PRESCALER_4096;
000004  2100              MOVS     r1,#0
000006  8041              STRH     r1,[r0,#2]
;;;77         TWI_InitStruct->TWI_Stretch = TWI_Stretch_Disable;
000008  8081              STRH     r1,[r0,#4]
;;;78         TWI_InitStruct->TWI_GeneralCall = TWI_GeneralCall_Disable;
00000a  80c1              STRH     r1,[r0,#6]
;;;79         TWI_InitStruct->TWI_SlaveAdress = 0x00;
00000c  6081              STR      r1,[r0,#8]
;;;80     }
00000e  4770              BX       lr
;;;81     
                          ENDP
;*** Start embedded assembler ***
#line 1 "..\\FWLib\\SC32F1XXX_Lib\\src\\sc32f1xxx_twi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_sc32f1xxx_twi_c_24100672____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___15_sc32f1xxx_twi_c_24100672____REV16| PROC
#line 464
 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_sc32f1xxx_twi_c_24100672____REVSH|
#line 478
|__asm___15_sc32f1xxx_twi_c_24100672____REVSH| PROC
#line 479
 revsh r0, r0
 bx lr
	ENDP
;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: armcc [4d365d]
; commandline armcc [--c99 --list --split_sections --debug -c --asm --interleave -o..\Output\SysFunVarDefine.o --asm_dir=..\List --list_dir=..\List --cpu=Cortex-M0+ --apcs=interwork -O0 -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -DSC32f10xx -D__UVISION_VERSION=536 ..\User\SysFunVarDefine.c]
                          THUMB
                          AREA ||i.OLED_Clear||, CODE, READONLY, ALIGN=1
                  OLED_Clear PROC
;;;33     
;;;34      void OLED_Clear(void)
000000  b570              PUSH     {r4-r6,lr}
;;;35     {
;;;36         
;;;37         uint8_t i,n;
;;;38         for(i=0;i<8;i++)  
000002  2400              MOVS     r4,#0
000004  e019              B        |L1.58|
                  |L1.6|
;;;39         {  
;;;40             OLED_WR_Byte (0xb0+i,OLED_CMD);    
000006  4621              MOV      r1,r4
000008  31b0              ADDS     r1,r1,#0xb0
00000a  b2c8              UXTB     r0,r1
00000c  2100              MOVS     r1,#0
00000e  f7fffffe          BL       OLED_WR_Byte
;;;41             OLED_WR_Byte (0x00,OLED_CMD);      
000012  2100              MOVS     r1,#0
000014  4608              MOV      r0,r1
000016  f7fffffe          BL       OLED_WR_Byte
;;;42             OLED_WR_Byte (0x10,OLED_CMD);     
00001a  2100              MOVS     r1,#0
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       OLED_WR_Byte
;;;43             for (n=0;n<128;n++)
000022  2500              MOVS     r5,#0
000024  e005              B        |L1.50|
                  |L1.38|
;;;44             {
;;;45                 OLED_WR_Byte(0,OLED_DATA); 
000026  2101              MOVS     r1,#1
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       OLED_WR_Byte
00002e  1c68              ADDS     r0,r5,#1              ;43
000030  b2c5              UXTB     r5,r0                 ;43
                  |L1.50|
000032  2d80              CMP      r5,#0x80              ;43
000034  dbf7              BLT      |L1.38|
000036  1c60              ADDS     r0,r4,#1              ;38
000038  b2c4              UXTB     r4,r0                 ;38
                  |L1.58|
00003a  2c08              CMP      r4,#8                 ;38
00003c  dbe3              BLT      |L1.6|
;;;46             }
;;;47         }
;;;48         
;;;49         
;;;50     }
00003e  bd70              POP      {r4-r6,pc}
;;;51     
                          ENDP
                          AREA ||i.OLED_ColorTurn||, CODE, READONLY, ALIGN=1
                  OLED_ColorTurn PROC
;;;51     
;;;52      void OLED_ColorTurn(uint8_t ColorValue)
000000  b510              PUSH     {r4,lr}
;;;53     {
000002  4604              MOV      r4,r0
;;;54         
;;;55         if (ColorValue==0)
000004  2c00              CMP      r4,#0
000006  d103              BNE      |L2.16|
;;;56          {
;;;57              OLED_WR_Byte(0xA6,OLED_CMD);
000008  2100              MOVS     r1,#0
00000a  20a6              MOVS     r0,#0xa6
00000c  f7fffffe          BL       OLED_WR_Byte
                  |L2.16|
;;;58          }
;;;59          if (ColorValue==1)
000010  2c01              CMP      r4,#1
000012  d103              BNE      |L2.28|
;;;60          {
;;;61              OLED_WR_Byte(0xA7,OLED_CMD);
000014  2100              MOVS     r1,#0
000016  20a7              MOVS     r0,#0xa7
000018  f7fffffe          BL       OLED_WR_Byte
                  |L2.28|
;;;62          }
;;;63         
;;;64         
;;;65     }
00001c  bd10              POP      {r4,pc}
;;;66     
                          ENDP
                          AREA ||i.OLED_DisplayTurn||, CODE, READONLY, ALIGN=1
                  OLED_DisplayTurn PROC
;;;86     
;;;87      void OLED_DisplayTurn(uint8_t TurnValue)
000000  b510              PUSH     {r4,lr}
;;;88     {
000002  4604              MOV      r4,r0
;;;89         
;;;90          if (TurnValue==0)
000004  2c00              CMP      r4,#0
000006  d107              BNE      |L3.24|
;;;91          {
;;;92              OLED_WR_Byte(0xC8,OLED_CMD);
000008  2100              MOVS     r1,#0
00000a  20c8              MOVS     r0,#0xc8
00000c  f7fffffe          BL       OLED_WR_Byte
;;;93              OLED_WR_Byte(0xA1,OLED_CMD);
000010  2100              MOVS     r1,#0
000012  20a1              MOVS     r0,#0xa1
000014  f7fffffe          BL       OLED_WR_Byte
                  |L3.24|
;;;94          }
;;;95          if(TurnValue==1)
000018  2c01              CMP      r4,#1
00001a  d107              BNE      |L3.44|
;;;96          {
;;;97              OLED_WR_Byte(0xC0,OLED_CMD);
00001c  2100              MOVS     r1,#0
00001e  20c0              MOVS     r0,#0xc0
000020  f7fffffe          BL       OLED_WR_Byte
;;;98              OLED_WR_Byte(0xA0,OLED_CMD);
000024  2100              MOVS     r1,#0
000026  20a0              MOVS     r0,#0xa0
000028  f7fffffe          BL       OLED_WR_Byte
                  |L3.44|
;;;99          }
;;;100        
;;;101        
;;;102    }
00002c  bd10              POP      {r4,pc}
;;;103    
                          ENDP
                          AREA ||i.OLED_Display_Off||, CODE, READONLY, ALIGN=1
                  OLED_Display_Off PROC
;;;66     
;;;67      void OLED_Display_Off(void)
000000  b510              PUSH     {r4,lr}
;;;68     {
;;;69         
;;;70         OLED_WR_Byte(0X8D,OLED_CMD);
000002  2100              MOVS     r1,#0
000004  208d              MOVS     r0,#0x8d
000006  f7fffffe          BL       OLED_WR_Byte
;;;71         OLED_WR_Byte(0X10,OLED_CMD);
00000a  2100              MOVS     r1,#0
00000c  2010              MOVS     r0,#0x10
00000e  f7fffffe          BL       OLED_WR_Byte
;;;72         OLED_WR_Byte(0XAE,OLED_CMD);
000012  2100              MOVS     r1,#0
000014  20ae              MOVS     r0,#0xae
000016  f7fffffe          BL       OLED_WR_Byte
;;;73         
;;;74         
;;;75     }
00001a  bd10              POP      {r4,pc}
;;;76     
                          ENDP
                          AREA ||i.OLED_Display_On||, CODE, READONLY, ALIGN=1
                  OLED_Display_On PROC
;;;76     
;;;77      void OLED_Display_On(void)
000000  b510              PUSH     {r4,lr}
;;;78     {
;;;79         
;;;80         OLED_WR_Byte(0X8D,OLED_CMD);
000002  2100              MOVS     r1,#0
000004  208d              MOVS     r0,#0x8d
000006  f7fffffe          BL       OLED_WR_Byte
;;;81          OLED_WR_Byte(0X14,OLED_CMD);
00000a  2100              MOVS     r1,#0
00000c  2014              MOVS     r0,#0x14
00000e  f7fffffe          BL       OLED_WR_Byte
;;;82          OLED_WR_Byte(0XAF,OLED_CMD);
000012  2100              MOVS     r1,#0
000014  20af              MOVS     r0,#0xaf
000016  f7fffffe          BL       OLED_WR_Byte
;;;83         
;;;84         
;;;85     }
00001a  bd10              POP      {r4,pc}
;;;86     
                          ENDP
                          AREA ||i.OLED_Init||, CODE, READONLY, ALIGN=1
                  OLED_Init PROC
;;;103    
;;;104     void OLED_Init(void)
000000  b510              PUSH     {r4,lr}
;;;105    {
;;;106        
;;;107         OLED_WR_Byte(0xAE,OLED_CMD);
000002  2100              MOVS     r1,#0
000004  20ae              MOVS     r0,#0xae
000006  f7fffffe          BL       OLED_WR_Byte
;;;108         OLED_WR_Byte(0x00,OLED_CMD);
00000a  2100              MOVS     r1,#0
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       OLED_WR_Byte
;;;109         OLED_WR_Byte(0x10,OLED_CMD);
000012  2100              MOVS     r1,#0
000014  2010              MOVS     r0,#0x10
000016  f7fffffe          BL       OLED_WR_Byte
;;;110         OLED_WR_Byte(0x40,OLED_CMD);
00001a  2100              MOVS     r1,#0
00001c  2040              MOVS     r0,#0x40
00001e  f7fffffe          BL       OLED_WR_Byte
;;;111         OLED_WR_Byte(0xb8,OLED_CMD);
000022  2100              MOVS     r1,#0
000024  20b8              MOVS     r0,#0xb8
000026  f7fffffe          BL       OLED_WR_Byte
;;;112         OLED_WR_Byte(0x81,OLED_CMD);
00002a  2100              MOVS     r1,#0
00002c  2081              MOVS     r0,#0x81
00002e  f7fffffe          BL       OLED_WR_Byte
;;;113         OLED_WR_Byte(0xff,OLED_CMD);
000032  2100              MOVS     r1,#0
000034  20ff              MOVS     r0,#0xff
000036  f7fffffe          BL       OLED_WR_Byte
;;;114         OLED_WR_Byte(0xa1,OLED_CMD);
00003a  2100              MOVS     r1,#0
00003c  20a1              MOVS     r0,#0xa1
00003e  f7fffffe          BL       OLED_WR_Byte
;;;115         OLED_WR_Byte(0xa6,OLED_CMD);
000042  2100              MOVS     r1,#0
000044  20a6              MOVS     r0,#0xa6
000046  f7fffffe          BL       OLED_WR_Byte
;;;116         OLED_WR_Byte(0xa8,OLED_CMD);
00004a  2100              MOVS     r1,#0
00004c  20a8              MOVS     r0,#0xa8
00004e  f7fffffe          BL       OLED_WR_Byte
;;;117         OLED_WR_Byte(0x3f,OLED_CMD);
000052  2100              MOVS     r1,#0
000054  203f              MOVS     r0,#0x3f
000056  f7fffffe          BL       OLED_WR_Byte
;;;118         OLED_WR_Byte(0xc8,OLED_CMD);
00005a  2100              MOVS     r1,#0
00005c  20c8              MOVS     r0,#0xc8
00005e  f7fffffe          BL       OLED_WR_Byte
;;;119         OLED_WR_Byte(0xd3,OLED_CMD);
000062  2100              MOVS     r1,#0
000064  20d3              MOVS     r0,#0xd3
000066  f7fffffe          BL       OLED_WR_Byte
;;;120         OLED_WR_Byte(0x00,OLED_CMD);
00006a  2100              MOVS     r1,#0
00006c  4608              MOV      r0,r1
00006e  f7fffffe          BL       OLED_WR_Byte
;;;121         OLED_WR_Byte(0xd5,OLED_CMD);
000072  2100              MOVS     r1,#0
000074  20d5              MOVS     r0,#0xd5
000076  f7fffffe          BL       OLED_WR_Byte
;;;122         OLED_WR_Byte(0x80,OLED_CMD);
00007a  2100              MOVS     r1,#0
00007c  2080              MOVS     r0,#0x80
00007e  f7fffffe          BL       OLED_WR_Byte
;;;123         OLED_WR_Byte(0xd8,OLED_CMD);
000082  2100              MOVS     r1,#0
000084  20d8              MOVS     r0,#0xd8
000086  f7fffffe          BL       OLED_WR_Byte
;;;124         OLED_WR_Byte(0x05,OLED_CMD);
00008a  2100              MOVS     r1,#0
00008c  2005              MOVS     r0,#5
00008e  f7fffffe          BL       OLED_WR_Byte
;;;125         OLED_WR_Byte(0xd9,OLED_CMD);
000092  2100              MOVS     r1,#0
000094  20d9              MOVS     r0,#0xd9
000096  f7fffffe          BL       OLED_WR_Byte
;;;126         OLED_WR_Byte(0xf1,OLED_CMD);
00009a  2100              MOVS     r1,#0
00009c  20f1              MOVS     r0,#0xf1
00009e  f7fffffe          BL       OLED_WR_Byte
;;;127         OLED_WR_Byte(0xda,OLED_CMD);
0000a2  2100              MOVS     r1,#0
0000a4  20da              MOVS     r0,#0xda
0000a6  f7fffffe          BL       OLED_WR_Byte
;;;128         OLED_WR_Byte(0x12,OLED_CMD);
0000aa  2100              MOVS     r1,#0
0000ac  2012              MOVS     r0,#0x12
0000ae  f7fffffe          BL       OLED_WR_Byte
;;;129         OLED_WR_Byte(0xdb,OLED_CMD);
0000b2  2100              MOVS     r1,#0
0000b4  20db              MOVS     r0,#0xdb
0000b6  f7fffffe          BL       OLED_WR_Byte
;;;130         OLED_WR_Byte(0x30,OLED_CMD);
0000ba  2100              MOVS     r1,#0
0000bc  2030              MOVS     r0,#0x30
0000be  f7fffffe          BL       OLED_WR_Byte
;;;131         OLED_WR_Byte(0x8d,OLED_CMD);
0000c2  2100              MOVS     r1,#0
0000c4  208d              MOVS     r0,#0x8d
0000c6  f7fffffe          BL       OLED_WR_Byte
;;;132         OLED_WR_Byte(0x14,OLED_CMD);
0000ca  2100              MOVS     r1,#0
0000cc  2014              MOVS     r0,#0x14
0000ce  f7fffffe          BL       OLED_WR_Byte
;;;133         OLED_WR_Byte(0xaf,OLED_CMD);
0000d2  2100              MOVS     r1,#0
0000d4  20af              MOVS     r0,#0xaf
0000d6  f7fffffe          BL       OLED_WR_Byte
;;;134         OLED_Clear();
0000da  f7fffffe          BL       OLED_Clear
;;;135         OLED_WR_Byte(0xAF,OLED_CMD);
0000de  2100              MOVS     r1,#0
0000e0  20af              MOVS     r0,#0xaf
0000e2  f7fffffe          BL       OLED_WR_Byte
;;;136         OLED_ColorTurn(0);
0000e6  2000              MOVS     r0,#0
0000e8  f7fffffe          BL       OLED_ColorTurn
;;;137         OLED_DisplayTurn(0);
0000ec  2000              MOVS     r0,#0
0000ee  f7fffffe          BL       OLED_DisplayTurn
;;;138         OLED_Display_Off();
0000f2  f7fffffe          BL       OLED_Display_Off
;;;139         OLED_Display_On();
0000f6  f7fffffe          BL       OLED_Display_On
;;;140        
;;;141        
;;;142    }
0000fa  bd10              POP      {r4,pc}
;;;143    
                          ENDP
                          AREA ||i.OLED_Set_Pos||, CODE, READONLY, ALIGN=1
                  OLED_Set_Pos PROC
;;;143    
;;;144     void OLED_Set_Pos(uint8_t x,uint8_t y)
000000  b570              PUSH     {r4-r6,lr}
;;;145    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;146        
;;;147         OLED_WR_Byte(0xb0+y,OLED_CMD);
000006  4629              MOV      r1,r5
000008  31b0              ADDS     r1,r1,#0xb0
00000a  b2c8              UXTB     r0,r1
00000c  2100              MOVS     r1,#0
00000e  f7fffffe          BL       OLED_WR_Byte
;;;148         OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
000012  21f0              MOVS     r1,#0xf0
000014  4021              ANDS     r1,r1,r4
000016  1109              ASRS     r1,r1,#4
000018  4608              MOV      r0,r1
00001a  3010              ADDS     r0,r0,#0x10
00001c  2100              MOVS     r1,#0
00001e  f7fffffe          BL       OLED_WR_Byte
;;;149         OLED_WR_Byte((x&0x0f),OLED_CMD);
000022  0720              LSLS     r0,r4,#28
000024  0f00              LSRS     r0,r0,#28
000026  2100              MOVS     r1,#0
000028  f7fffffe          BL       OLED_WR_Byte
;;;150        
;;;151        
;;;152    }
00002c  bd70              POP      {r4-r6,pc}
;;;153    
;;;157     void OLED_ShowByte(uint8_t x,uint8_t y,uint8_t input)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;158    {
000002  4607              MOV      r7,r0
000004  4615              MOV      r5,r2
;;;159        
;;;160         unsigned char SwapValue = 0x00;
000006  2600              MOVS     r6,#0
;;;161         int SwapNumber;
;;;162         for (SwapNumber=0;SwapNumber<8;SwapNumber++)
000008  2400              MOVS     r4,#0
00000a  e008              B        |L8.30|
                  |L8.12|
;;;163         {
;;;164             if(input & (0x01 << SwapNumber))
00000c  2001              MOVS     r0,#1
00000e  40a0              LSLS     r0,r0,r4
000010  4028              ANDS     r0,r0,r5
000012  2800              CMP      r0,#0
000014  d002              BEQ      |L8.28|
;;;165             SwapValue |= (0x80 >> SwapNumber);
000016  2080              MOVS     r0,#0x80
000018  4120              ASRS     r0,r0,r4
00001a  4306              ORRS     r6,r6,r0
                  |L8.28|
00001c  1c64              ADDS     r4,r4,#1              ;162
                  |L8.30|
00001e  2c08              CMP      r4,#8                 ;162
000020  dbf4              BLT      |L8.12|
;;;166         }
;;;167         OLED_Set_Pos(x,y);
000022  4638              MOV      r0,r7
000024  9901              LDR      r1,[sp,#4]
000026  f7fffffe          BL       OLED_Set_Pos
;;;168         OLED_WR_Byte(SwapValue,OLED_DATA);
00002a  2101              MOVS     r1,#1
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       OLED_WR_Byte
;;;169        
;;;170        
;;;171    }
000032  bdfe              POP      {r1-r7,pc}
;;;172    
                          ENDP
                          AREA ||i.OLED_WR_Byte||, CODE, READONLY, ALIGN=1
                  OLED_WR_Byte PROC
;;;172    
;;;173     void OLED_WR_Byte(uint8_t dat,uint8_t mode)
000000  b570              PUSH     {r4-r6,lr}
;;;174    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;175        
;;;176         TWI_Start();
000006  f7fffffe          BL       TWI_Start
;;;177         TWI_SendByte(0x78);
00000a  2078              MOVS     r0,#0x78
00000c  f7fffffe          BL       TWI_SendByte
;;;178         if (mode)
000010  2c00              CMP      r4,#0
000012  d003              BEQ      |L9.28|
;;;179         {
;;;180             TWI_SendByte(0x40);
000014  2040              MOVS     r0,#0x40
000016  f7fffffe          BL       TWI_SendByte
00001a  e002              B        |L9.34|
                  |L9.28|
;;;181         }
;;;182         else
;;;183         {
;;;184             TWI_SendByte(0x00);
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       TWI_SendByte
                  |L9.34|
;;;185         }
;;;186         TWI_SendByte(dat);
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       TWI_SendByte
;;;187         TWI_Stop();
000028  f7fffffe          BL       TWI_Stop
;;;188        
;;;189        
;;;190    }
00002c  bd70              POP      {r4-r6,pc}
;;;191    
                          ENDP
                          AREA ||i.TWI_SendByte||, CODE, READONLY, ALIGN=2
                  TWI_SendByte PROC
;;;191    
;;;192     void TWI_SendByte(uint8_t SendByte)
000000  b510              PUSH     {r4,lr}
;;;193    {
000002  4604              MOV      r4,r0
;;;194        
;;;195         TWI_SendData(TWI0,SendByte);
000004  4621              MOV      r1,r4
000006  4806              LDR      r0,|L10.32|
000008  f7fffffe          BL       TWI_SendData
;;;196         while (!TWI0Flag);
00000c  bf00              NOP      
                  |L10.14|
00000e  4805              LDR      r0,|L10.36|
000010  7800              LDRB     r0,[r0,#0]  ; TWI0Flag
000012  2800              CMP      r0,#0
000014  d0fb              BEQ      |L10.14|
;;;197         TWI0Flag = 0;
000016  2000              MOVS     r0,#0
000018  4902              LDR      r1,|L10.36|
00001a  7008              STRB     r0,[r1,#0]
;;;198        
;;;199        
;;;200    }
00001c  bd10              POP      {r4,pc}
;;;201    
                          ENDP
00001e  0000              DCW      0x0000
                  |L10.32|
                          DCD      0x40020060
                  |L10.36|
                          DCD      TWI0Flag
                          AREA ||i.TWI_Start||, CODE, READONLY, ALIGN=2
                  TWI_Start PROC
;;;201    
;;;202     void TWI_Start(void)
000000  b510              PUSH     {r4,lr}
;;;203    {
;;;204        
;;;205        TWI_GenerateSTART(TWI0,ENABLE);
000002  2101              MOVS     r1,#1
000004  4807              LDR      r0,|L11.36|
000006  f7fffffe          BL       TWI_GenerateSTART
;;;206        while(!TWI0Flag);
00000a  bf00              NOP      
                  |L11.12|
00000c  4806              LDR      r0,|L11.40|
00000e  7800              LDRB     r0,[r0,#0]  ; TWI0Flag
000010  2800              CMP      r0,#0
000012  d0fb              BEQ      |L11.12|
;;;207        TWI0Flag = 0;
000014  2000              MOVS     r0,#0
000016  4904              LDR      r1,|L11.40|
000018  7008              STRB     r0,[r1,#0]
;;;208        delay(200); 
00001a  20c8              MOVS     r0,#0xc8
00001c  f7fffffe          BL       delay
;;;209        
;;;210        
;;;211    }
000020  bd10              POP      {r4,pc}
;;;212    
                          ENDP
000022  0000              DCW      0x0000
                  |L11.36|
                          DCD      0x40020060
                  |L11.40|
                          DCD      TWI0Flag
                          AREA ||i.TWI_Stop||, CODE, READONLY, ALIGN=2
                  TWI_Stop PROC
;;;212    
;;;213     void TWI_Stop(void)
000000  b510              PUSH     {r4,lr}
;;;214    {
;;;215        
;;;216        TWI_GenerateSTOP(TWI0,ENABLE);
000002  2101              MOVS     r1,#1
000004  4803              LDR      r0,|L12.20|
000006  f7fffffe          BL       TWI_GenerateSTOP
;;;217        delay(1300);
00000a  4803              LDR      r0,|L12.24|
00000c  f7fffffe          BL       delay
;;;218        
;;;219        
;;;220    }
000010  bd10              POP      {r4,pc}
;;;221    
                          ENDP
000012  0000              DCW      0x0000
                  |L12.20|
                          DCD      0x40020060
                  |L12.24|
                          DCD      0x00000514
                          AREA ||i.delay||, CODE, READONLY, ALIGN=1
                  delay PROC
;;;25     unsigned char US0_UART_ReceiveData = 0;
;;;26      void delay(uint16_t cnt)
000000  bf00              NOP      
                  |L13.2|
;;;27     {
;;;28         
;;;29         while(cnt--);
000002  4601              MOV      r1,r0
000004  1e42              SUBS     r2,r0,#1
000006  b290              UXTH     r0,r2
000008  2900              CMP      r1,#0
00000a  d1fa              BNE      |L13.2|
;;;30         
;;;31         
;;;32     }
00000c  4770              BX       lr
;;;33     
                          ENDP
                          AREA ||.constdata||, DATA, READONLY, ALIGN=0
                  ||HZ||
000000  10614155          DCB      0x10,0x61,0x41,0x55
000004  557f55d5          DCB      0x55,0x7f,0x55,0xd5
000008  557f5555          DCB      0x55,0x7f,0x55,0x55
00000c  41516000          DCB      0x41,0x51,0x60,0x00
000010  10102041          DCB      0x10,0x10,0x20,0x41
000014  f942425c          DCB      0xf9,0x42,0x42,0x5c
000018  4242f941          DCB      0x42,0x42,0xf9,0x41
00001c  20302000          DCB      0x20,0x30,0x20,0x00
000020  04044444          DCB      0x04,0x04,0x44,0x44
000024  44474444          DCB      0x44,0x47,0x44,0x44
000028  444744c4          DCB      0x44,0x47,0x44,0xc4
00002c  440c0400          DCB      0x44,0x0c,0x04,0x00
000030  01010204          DCB      0x01,0x01,0x02,0x04
000034  18e00000          DCB      0x18,0xe0,0x00,0x00
000038  00fc0202          DCB      0x00,0xfc,0x02,0x02
00003c  02020e00          DCB      0x02,0x02,0x0e,0x00
000040  081123c5          DCB      0x08,0x11,0x23,0xc5
000044  3d05fd05          DCB      0x3d,0x05,0xfd,0x05
000048  3d041be8          DCB      0x3d,0x04,0x1b,0xe8
00004c  091e0800          DCB      0x09,0x1e,0x08,0x00
000050  8000ff02          DCB      0x80,0x00,0xff,0x02
000054  7c40407c          DCB      0x7c,0x40,0x40,0x7c
000058  0912cc30          DCB      0x09,0x12,0xcc,0x30
00005c  cc030200          DCB      0xcc,0x03,0x02,0x00
000060  001f1212          DCB      0x00,0x1f,0x12,0x12
000064  1212ff12          DCB      0x12,0x12,0xff,0x12
000068  1212123f          DCB      0x12,0x12,0x12,0x3f
00006c  10000000          DCB      0x10,0x00,0x00,0x00
000070  00e04040          DCB      0x00,0xe0,0x40,0x40
000074  4040fc42          DCB      0x40,0x40,0xfc,0x42
000078  424242e2          DCB      0x42,0x42,0x42,0xe2
00007c  020e0000          DCB      0x02,0x0e,0x00,0x00
000080  01014141          DCB      0x01,0x01,0x41,0x41
000084  41414147          DCB      0x41,0x41,0x41,0x47
000088  45495161          DCB      0x45,0x49,0x51,0x61
00008c  01030100          DCB      0x01,0x03,0x01,0x00
000090  00000000          DCB      0x00,0x00,0x00,0x00
000094  000201fe          DCB      0x00,0x02,0x01,0xfe
000098  00000000          DCB      0x00,0x00,0x00,0x00
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  0f1f3020          DCB      0x0f,0x1f,0x30,0x20
0000a8  2020301f          DCB      0x20,0x20,0x30,0x1f
0000ac  0f000000          DCB      0x0f,0x00,0x00,0x00
0000b0  00000000          DCB      0x00,0x00,0x00,0x00
0000b4  f0f80c04          DCB      0xf0,0xf8,0x0c,0x04
0000b8  04040cf8          DCB      0x04,0x04,0x0c,0xf8
0000bc  f0000000          DCB      0xf0,0x00,0x00,0x00
0000c0  00000000          DCB      0x00,0x00,0x00,0x00
0000c4  0000101f          DCB      0x00,0x00,0x10,0x1f
0000c8  3f000000          DCB      0x3f,0x00,0x00,0x00
0000cc  00000000          DCB      0x00,0x00,0x00,0x00
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
0000d4  000004fc          DCB      0x00,0x00,0x04,0xfc
0000d8  fc040000          DCB      0xfc,0x04,0x00,0x00
0000dc  00000000          DCB      0x00,0x00,0x00,0x00
                          AREA ||.data||, DATA, ALIGN=0
                  TWI0Flag
000000  00                DCB      0x00
                  TWI0SendData
000001  00                DCB      0x00
                  US0_UART_ReceiveData
000002  00                DCB      0x00
;*** Start embedded assembler ***
#line 1 "..\\User\\SysFunVarDefine.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_SysFunVarDefine_c_HZ____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___17_SysFunVarDefine_c_HZ____REV16| PROC
#line 464
 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_SysFunVarDefine_c_HZ____REVSH|
#line 478
|__asm___17_SysFunVarDefine_c_HZ____REVSH| PROC
#line 479
 revsh r0, r0
 bx lr
	ENDP
;*** End   embedded assembler ***

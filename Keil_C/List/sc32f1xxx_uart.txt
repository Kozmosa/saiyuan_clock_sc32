; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: armcc [4d365d]
; commandline armcc [--c99 --list --split_sections --debug -c --asm --interleave -o..\Output\sc32f1xxx_uart.o --asm_dir=..\List --list_dir=..\List --cpu=Cortex-M0+ --apcs=interwork -O0 -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -DSC32f10xx -D__UVISION_VERSION=536 ..\FWLib\SC32F1XXX_Lib\src\sc32f1xxx_uart.c]
                          THUMB
                          AREA ||i.Printf_UartInit||, CODE, READONLY, ALIGN=2
                  Printf_UartInit PROC
;;;734     */
;;;735    __weak void Printf_UartInit ( UART_TypeDef* UARTx )
000000  4901              LDR      r1,|L1.8|
;;;736    {
;;;737    
;;;738        Printf_Uart = UARTx;
000002  6008              STR      r0,[r1,#0]  ; Printf_Uart
;;;739    }
000004  4770              BX       lr
;;;740    
                          ENDP
000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      Printf_Uart
                          AREA ||i.UART_ClearFlag||, CODE, READONLY, ALIGN=1
                  UART_ClearFlag PROC
;;;474     */
;;;475    void UART_ClearFlag ( UART_TypeDef* UARTx, uint16_t UART_FLAG )
000000  6041              STR      r1,[r0,#4]
;;;476    {
;;;477        
;;;478        assert_param ( IS_UART_ALL_PERIPH ( UARTx ) );
;;;479    
;;;480        
;;;481        UARTx->UART_STS = ( uint16_t ) UART_FLAG;
;;;482    }
000002  4770              BX       lr
;;;483    
                          ENDP
                          AREA ||i.UART_DMACmd||, CODE, READONLY, ALIGN=1
                  UART_DMACmd PROC
;;;500     */
;;;501    void UART_DMACmd ( UART_TypeDef* UARTx, uint16_t UART_DMAReq, FunctionalState NewState )
000000  b510              PUSH     {r4,lr}
;;;502    {
;;;503        
;;;504        assert_param ( IS_UART_ALL_PERIPH ( UARTx ) );
;;;505        assert_param ( IS_UART_DMAREQ ( UART_DMAReq ) );
;;;506        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;507    
;;;508        if ( NewState != DISABLE )
000002  2a00              CMP      r2,#0
000004  d003              BEQ      |L3.14|
;;;509        {
;;;510            
;;;512            UARTx->UART_IDE |= UART_DMAReq;
000006  6903              LDR      r3,[r0,#0x10]
000008  430b              ORRS     r3,r3,r1
00000a  6103              STR      r3,[r0,#0x10]
00000c  e004              B        |L3.24|
                  |L3.14|
;;;513        }
;;;514        else
;;;515        {
;;;516            
;;;518            UARTx->UART_IDE &= ( uint16_t ) ~UART_DMAReq;
00000e  6903              LDR      r3,[r0,#0x10]
000010  43cc              MVNS     r4,r1
000012  b2a4              UXTH     r4,r4
000014  4023              ANDS     r3,r3,r4
000016  6103              STR      r3,[r0,#0x10]
                  |L3.24|
;;;519        }
;;;520    }
000018  bd10              POP      {r4,pc}
;;;521    
                          ENDP
                          AREA ||i.UART_DeInit||, CODE, READONLY, ALIGN=2
                  UART_DeInit PROC
;;;52      */
;;;53     void UART_DeInit ( UART_TypeDef* UARTx )
000000  b510              PUSH     {r4,lr}
;;;54     {
000002  4604              MOV      r4,r0
;;;55         assert_param ( IS_UART_ALL_PERIPH ( UARTx ) );
;;;56     
;;;57         if ( UARTx == UART0 )
000004  4818              LDR      r0,|L4.104|
000006  4284              CMP      r4,r0
000008  d108              BNE      |L4.28|
;;;58         {
;;;59             
;;;60             RCC_APB0PeriphResetCmd ( RCC_APB0Periph_UART0, ENABLE );
00000a  2101              MOVS     r1,#1
00000c  2040              MOVS     r0,#0x40
00000e  f7fffffe          BL       RCC_APB0PeriphResetCmd
;;;61             
;;;62             RCC_APB0PeriphResetCmd ( RCC_APB0Periph_UART0, DISABLE );
000012  2100              MOVS     r1,#0
000014  2040              MOVS     r0,#0x40
000016  f7fffffe          BL       RCC_APB0PeriphResetCmd
00001a  e023              B        |L4.100|
                  |L4.28|
;;;63         }
;;;64         else if ( UARTx == UART1 )
00001c  4812              LDR      r0,|L4.104|
00001e  3060              ADDS     r0,r0,#0x60
000020  4284              CMP      r4,r0
000022  d108              BNE      |L4.54|
;;;65         {
;;;66             
;;;67             RCC_APB0PeriphResetCmd ( RCC_APB0Periph_UART1, ENABLE );
000024  2101              MOVS     r1,#1
000026  2080              MOVS     r0,#0x80
000028  f7fffffe          BL       RCC_APB0PeriphResetCmd
;;;68             
;;;69             RCC_APB0PeriphResetCmd ( RCC_APB0Periph_UART1, DISABLE );
00002c  2100              MOVS     r1,#0
00002e  2080              MOVS     r0,#0x80
000030  f7fffffe          BL       RCC_APB0PeriphResetCmd
000034  e016              B        |L4.100|
                  |L4.54|
;;;70         }
;;;71         else if ( UARTx == UART2 )
000036  480d              LDR      r0,|L4.108|
000038  4284              CMP      r4,r0
00003a  d108              BNE      |L4.78|
;;;72         {
;;;73             
;;;74             RCC_APB1PeriphResetCmd ( RCC_APB1Periph_UART2, ENABLE );
00003c  2101              MOVS     r1,#1
00003e  2080              MOVS     r0,#0x80
000040  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;75             
;;;76             RCC_APB1PeriphResetCmd ( RCC_APB1Periph_UART2, DISABLE );
000044  2100              MOVS     r1,#0
000046  2080              MOVS     r0,#0x80
000048  f7fffffe          BL       RCC_APB1PeriphResetCmd
00004c  e00a              B        |L4.100|
                  |L4.78|
;;;77         }
;;;78         else if ( UARTx == UART3 )
00004e  4808              LDR      r0,|L4.112|
000050  4284              CMP      r4,r0
000052  d107              BNE      |L4.100|
;;;79         {
;;;80             
;;;81             RCC_APB2PeriphResetCmd ( RCC_APB2Periph_UART3, ENABLE );
000054  2101              MOVS     r1,#1
000056  2004              MOVS     r0,#4
000058  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;82             
;;;83             RCC_APB2PeriphResetCmd ( RCC_APB2Periph_UART3, DISABLE );
00005c  2100              MOVS     r1,#0
00005e  2004              MOVS     r0,#4
000060  f7fffffe          BL       RCC_APB2PeriphResetCmd
                  |L4.100|
;;;84         }
;;;85     #if  defined(SC32f11xx) || defined(SC32f12xx)
;;;86         if ( UARTx == UART4 )
;;;87         {
;;;88             
;;;89             RCC_APB1PeriphResetCmd ( RCC_APB1Periph_UART4, ENABLE );
;;;90             
;;;91             RCC_APB1PeriphResetCmd ( RCC_APB1Periph_UART4, DISABLE );
;;;92         }
;;;93         else if ( UARTx == UART5 )
;;;94         {
;;;95             
;;;96             RCC_APB0PeriphResetCmd ( RCC_APB0Periph_UART5, ENABLE );
;;;97             
;;;98             RCC_APB0PeriphResetCmd ( RCC_APB0Periph_UART5, DISABLE );
;;;99         }
;;;100    #endif
;;;101    }
000064  bd10              POP      {r4,pc}
;;;102    
                          ENDP
000066  0000              DCW      0x0000
                  |L4.104|
                          DCD      0x40020020
                  |L4.108|
                          DCD      0x40021020
                  |L4.112|
                          DCD      0x40022020
                          AREA ||i.UART_GetFlagStatus||, CODE, READONLY, ALIGN=1
                  UART_GetFlagStatus PROC
;;;434     */
;;;435    FlagStatus UART_GetFlagStatus ( UART_TypeDef* UARTx, UART_FLAG_TypeDef UART_FLAG )
000000  4602              MOV      r2,r0
;;;436    {
;;;437        ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;438        
;;;439        assert_param ( IS_UART_ALL_PERIPH ( UARTx ) );
;;;440        assert_param ( IS_GET_UART_FLAG ( UART_FLAG ) );
;;;441    
;;;442        if ( ( UARTx->UART_STS & UART_FLAG ) != ( uint16_t ) RESET )
000004  6853              LDR      r3,[r2,#4]
000006  400b              ANDS     r3,r3,r1
000008  2b00              CMP      r3,#0
00000a  d001              BEQ      |L5.16|
;;;443        {
;;;444            bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L5.18|
                  |L5.16|
;;;445        }
;;;446        else
;;;447        {
;;;448            bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L5.18|
;;;449        }
;;;450        return bitstatus;
;;;451    }
000012  4770              BX       lr
;;;452    
                          ENDP
                          AREA ||i.UART_ITConfig||, CODE, READONLY, ALIGN=1
                  UART_ITConfig PROC
;;;394     */
;;;395    void UART_ITConfig ( UART_TypeDef* UARTx, uint16_t UART_IT, FunctionalState NewState )
000000  b510              PUSH     {r4,lr}
;;;396    {
;;;397        
;;;398        assert_param ( IS_UART_ALL_PERIPH ( UARTx ) );
;;;399        assert_param ( IS_UART_IT ( UART_IT ) );
;;;400        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;401    
;;;402        if ( NewState != DISABLE )
000002  2a00              CMP      r2,#0
000004  d003              BEQ      |L6.14|
;;;403        {
;;;404            
;;;405            UARTx->UART_IDE |= UART_IT;
000006  6903              LDR      r3,[r0,#0x10]
000008  430b              ORRS     r3,r3,r1
00000a  6103              STR      r3,[r0,#0x10]
00000c  e004              B        |L6.24|
                  |L6.14|
;;;406        }
;;;407        else
;;;408        {
;;;409            
;;;410            UARTx->UART_IDE &= ( uint16_t ) ~UART_IT;
00000e  6903              LDR      r3,[r0,#0x10]
000010  43cc              MVNS     r4,r1
000012  b2a4              UXTH     r4,r4
000014  4023              ANDS     r3,r3,r4
000016  6103              STR      r3,[r0,#0x10]
                  |L6.24|
;;;411        }
;;;412    }
000018  bd10              POP      {r4,pc}
;;;413    
                          ENDP
                          AREA ||i.UART_Init||, CODE, READONLY, ALIGN=2
                  UART_Init PROC
;;;119     */
;;;120    void UART_Init ( UART_TypeDef* UARTx, UART_InitTypeDef* UART_InitStruct )
000000  b570              PUSH     {r4-r6,lr}
;;;121    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;122        uint32_t tmpreg;
;;;123        
;;;124        assert_param ( IS_UART_ALL_PERIPH ( UARTx ) );
;;;125        assert_param ( IS_UART_Mode ( UART_InitStruct->UART_Mode ) );
;;;126    
;;;127        tmpreg = UARTx->UART_CON;
000006  6826              LDR      r6,[r4,#0]
;;;128        tmpreg &= ( uint32_t ) ~ ( UART_CON_SM01 | UART_CON_SM2 );
000008  08f6              LSRS     r6,r6,#3
00000a  00f6              LSLS     r6,r6,#3
;;;129        tmpreg |= ( uint32_t ) ( UART_InitStruct->UART_Mode );
00000c  68a8              LDR      r0,[r5,#8]
00000e  4306              ORRS     r6,r6,r0
;;;130        UARTx->UART_CON = tmpreg;
000010  6026              STR      r6,[r4,#0]
;;;131    
;;;132        if ( UART_InitStruct->UART_Mode == UART_Mode_8B )
000012  68a8              LDR      r0,[r5,#8]
000014  2800              CMP      r0,#0
000016  d108              BNE      |L7.42|
;;;133        {
;;;134            assert_param ( IS_UART_PRESCALER ( UART_InitStruct->UART_BaudRate ) );
;;;135    
;;;136            UARTx->UART_CON &= ~ ( uint32_t ) UART_CON_PERSCALER;
000018  6820              LDR      r0,[r4,#0]
00001a  2110              MOVS     r1,#0x10
00001c  4388              BICS     r0,r0,r1
00001e  6020              STR      r0,[r4,#0]
;;;137            UARTx->UART_CON |= ( uint32_t ) UART_InitStruct->UART_BaudRate;
000020  6820              LDR      r0,[r4,#0]
000022  6869              LDR      r1,[r5,#4]
000024  4308              ORRS     r0,r0,r1
000026  6020              STR      r0,[r4,#0]
000028  e00d              B        |L7.70|
                  |L7.42|
;;;138        }
;;;139        else
;;;140        {
;;;141            tmpreg = ( UART_InitStruct->UART_ClockFrequency / UART_InitStruct->UART_BaudRate );
00002a  6869              LDR      r1,[r5,#4]
00002c  6828              LDR      r0,[r5,#0]
00002e  f7fffffe          BL       __aeabi_uidivmod
000032  4606              MOV      r6,r0
;;;142            if ( tmpreg > 65535 )
000034  4804              LDR      r0,|L7.72|
000036  4286              CMP      r6,r0
000038  d904              BLS      |L7.68|
;;;143            {
;;;144                UARTx->UART_CON |= ( uint32_t ) UART_CON_PERSCALER;
00003a  6820              LDR      r0,[r4,#0]
00003c  2110              MOVS     r1,#0x10
00003e  4308              ORRS     r0,r0,r1
000040  6020              STR      r0,[r4,#0]
;;;145                tmpreg = tmpreg / 16;
000042  0936              LSRS     r6,r6,#4
                  |L7.68|
;;;146            }
;;;147            UARTx->UART_BAUD = tmpreg;
000044  60a6              STR      r6,[r4,#8]
                  |L7.70|
;;;148        }
;;;149    }
000046  bd70              POP      {r4-r6,pc}
;;;150    
                          ENDP
                  |L7.72|
                          DCD      0x0000ffff
                          AREA ||i.UART_PinRemapConfig||, CODE, READONLY, ALIGN=2
                  UART_PinRemapConfig PROC
;;;314     */
;;;315    void UART_PinRemapConfig ( UART_TypeDef* UARTx, UART_PinRemap_TypeDef UART_Remap )
000000  b510              PUSH     {r4,lr}
;;;316    {
000002  460a              MOV      r2,r1
;;;317        uint32_t tmpreg;
;;;318    
;;;319        
;;;320        assert_param ( IS_UART_REMAP_PERIPH ( UARTx ) );
;;;321    #if defined(SC32f10xx)
;;;322        if ( UARTx == UART2 )
000004  4b06              LDR      r3,|L8.32|
000006  4298              CMP      r0,r3
000008  d109              BNE      |L8.30|
;;;323        {
;;;324            tmpreg = UARTx->UART_CON;
00000a  6801              LDR      r1,[r0,#0]
;;;325    
;;;326            tmpreg &= ( uint32_t ) ( ~UART_CON_SPOS );
00000c  2403              MOVS     r4,#3
00000e  03a4              LSLS     r4,r4,#14
000010  460b              MOV      r3,r1
000012  43a3              BICS     r3,r3,r4
000014  4619              MOV      r1,r3
;;;327    
;;;328            tmpreg |= UART_Remap;
000016  460b              MOV      r3,r1
000018  4313              ORRS     r3,r3,r2
00001a  4619              MOV      r1,r3
;;;329    
;;;330            UARTx->UART_CON = tmpreg;
00001c  6001              STR      r1,[r0,#0]
                  |L8.30|
;;;331        }
;;;332    #elif defined(SC32f11xx)
;;;333        if ( UARTx == UART2 || UARTx == UART1 || UARTx == UART5 )
;;;334        {
;;;335            tmpreg = UARTx->UART_CON;
;;;336    
;;;337            tmpreg &= ( uint32_t ) ( ~UART_CON_SPOS );
;;;338    
;;;339            tmpreg |= UART_Remap;
;;;340    
;;;341            UARTx->UART_CON = tmpreg;
;;;342        }
;;;343    #elif defined(SC32f12xx)
;;;344        tmpreg = UARTx->UART_CON;
;;;345    
;;;346        tmpreg &= ( uint32_t ) ( ~UART_CON_SPOS );
;;;347    
;;;348        tmpreg |= UART_Remap;
;;;349    
;;;350        UARTx->UART_CON = tmpreg;
;;;351    #endif
;;;352    }
00001e  bd10              POP      {r4,pc}
;;;353    
                          ENDP
                  |L8.32|
                          DCD      0x40021020
                          AREA ||i.UART_RXCmd||, CODE, READONLY, ALIGN=2
                  UART_RXCmd PROC
;;;202     */
;;;203    void UART_RXCmd ( UART_TypeDef* UARTx, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;204    {
;;;205        
;;;206        assert_param ( IS_UART_ALL_PERIPH ( UARTx ) );
;;;207        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;208    
;;;209        if ( NewState != DISABLE )
000002  d004              BEQ      |L9.14|
;;;210        {
;;;211            
;;;212            UARTx->UART_CON |= UART_CON_RXEN;
000004  6802              LDR      r2,[r0,#0]
000006  2340              MOVS     r3,#0x40
000008  431a              ORRS     r2,r2,r3
00000a  6002              STR      r2,[r0,#0]
00000c  e003              B        |L9.22|
                  |L9.14|
;;;213        }
;;;214        else
;;;215        {
;;;216            
;;;217            UARTx->UART_CON &= ( uint16_t ) ~UART_CON_RXEN;
00000e  6802              LDR      r2,[r0,#0]
000010  4b01              LDR      r3,|L9.24|
000012  401a              ANDS     r2,r2,r3
000014  6002              STR      r2,[r0,#0]
                  |L9.22|
;;;218        }
;;;219    }
000016  4770              BX       lr
;;;220    
                          ENDP
                  |L9.24|
                          DCD      0x0000ffbf
                          AREA ||i.UART_ReceiveData||, CODE, READONLY, ALIGN=1
                  UART_ReceiveData PROC
;;;273     */
;;;274    uint16_t UART_ReceiveData ( UART_TypeDef* UARTx )
000000  4601              MOV      r1,r0
;;;275    {
;;;276        
;;;277        assert_param ( IS_UART_ALL_PERIPH ( UARTx ) );
;;;278    
;;;279        
;;;280        return ( uint16_t ) ( UARTx->UART_DATA & ( uint16_t ) 0x01FF );
000002  68c8              LDR      r0,[r1,#0xc]
000004  05c0              LSLS     r0,r0,#23
000006  0dc0              LSRS     r0,r0,#23
;;;281    }
000008  4770              BX       lr
;;;282    
                          ENDP
                          AREA ||i.UART_SendData||, CODE, READONLY, ALIGN=1
                  UART_SendData PROC
;;;250     */
;;;251    void UART_SendData ( UART_TypeDef* UARTx, uint16_t Data )
000000  05ca              LSLS     r2,r1,#23
;;;252    {
;;;253        
;;;254        assert_param ( IS_UART_ALL_PERIPH ( UARTx ) );
;;;255    
;;;256        
;;;257        UARTx->UART_DATA = ( Data & ( uint16_t ) 0x01FF );
000002  0dd2              LSRS     r2,r2,#23
000004  60c2              STR      r2,[r0,#0xc]
;;;258    }
000006  4770              BX       lr
;;;259    
                          ENDP
                          AREA ||i.UART_TXCmd||, CODE, READONLY, ALIGN=2
                  UART_TXCmd PROC
;;;167     */
;;;168    void UART_TXCmd ( UART_TypeDef* UARTx, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;169    {
;;;170        
;;;171        assert_param ( IS_UART_ALL_PERIPH ( UARTx ) );
;;;172        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;173    
;;;174        if ( NewState != DISABLE )
000002  d004              BEQ      |L12.14|
;;;175        {
;;;176            
;;;177            UARTx->UART_CON |= UART_CON_TXEN;
000004  6802              LDR      r2,[r0,#0]
000006  2380              MOVS     r3,#0x80
000008  431a              ORRS     r2,r2,r3
00000a  6002              STR      r2,[r0,#0]
00000c  e003              B        |L12.22|
                  |L12.14|
;;;178        }
;;;179        else
;;;180        {
;;;181            
;;;182            UARTx->UART_CON &= ( uint16_t ) ~UART_CON_TXEN;
00000e  6802              LDR      r2,[r0,#0]
000010  4b01              LDR      r3,|L12.24|
000012  401a              ANDS     r2,r2,r3
000014  6002              STR      r2,[r0,#0]
                  |L12.22|
;;;183        }
;;;184    }
000016  4770              BX       lr
;;;185    
                          ENDP
                  |L12.24|
                          DCD      0x0000ff7f
                          AREA ||i._sys_exit||, CODE, READONLY, ALIGN=1
                  _sys_exit PROC
;;;720    
;;;721    void _sys_exit ( int x )
000000  bf00              NOP      
;;;722    {
;;;723        x = x;
;;;724    }
000002  4770              BX       lr
;;;725    #endif
                          ENDP
                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2
                  fputc PROC
;;;740    
;;;741    __weak int fputc ( int c, FILE* f )
000000  b530              PUSH     {r4,r5,lr}
;;;742    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;743        UART_SendData ( Printf_Uart, ( uint8_t ) c );
000006  b2e1              UXTB     r1,r4
000008  4809              LDR      r0,|L14.48|
00000a  6800              LDR      r0,[r0,#0]  ; Printf_Uart
00000c  f7fffffe          BL       UART_SendData
;;;744        while ( !UART_GetFlagStatus ( Printf_Uart, UART_Flag_TX ) );
000010  bf00              NOP      
                  |L14.18|
000012  2102              MOVS     r1,#2
000014  4806              LDR      r0,|L14.48|
000016  6800              LDR      r0,[r0,#0]  ; Printf_Uart
000018  f7fffffe          BL       UART_GetFlagStatus
00001c  2800              CMP      r0,#0
00001e  d0f8              BEQ      |L14.18|
;;;745        UART_ClearFlag ( Printf_Uart, UART_Flag_TX );
000020  2102              MOVS     r1,#2
000022  4803              LDR      r0,|L14.48|
000024  6800              LDR      r0,[r0,#0]  ; Printf_Uart
000026  f7fffffe          BL       UART_ClearFlag
;;;746        return c;
00002a  4620              MOV      r0,r4
;;;747    }
00002c  bd30              POP      {r4,r5,pc}
;;;748    
                          ENDP
00002e  0000              DCW      0x0000
                  |L14.48|
                          DCD      Printf_Uart
                          AREA ||.data||, DATA, ALIGN=2
                  Printf_Uart
                          DCD      0x00000000
                  __stdout
                          DCD      0x00000000
;*** Start embedded assembler ***
#line 1 "..\\FWLib\\SC32F1XXX_Lib\\src\\sc32f1xxx_uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_sc32f1xxx_uart_c_c95a8597____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___16_sc32f1xxx_uart_c_c95a8597____REV16| PROC
#line 464
 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_sc32f1xxx_uart_c_c95a8597____REVSH|
#line 478
|__asm___16_sc32f1xxx_uart_c_c95a8597____REVSH| PROC
#line 479
 revsh r0, r0
 bx lr
	ENDP
;*** End   embedded assembler ***

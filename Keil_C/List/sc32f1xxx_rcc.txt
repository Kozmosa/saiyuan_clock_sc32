; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: armcc [4d365d]
; commandline armcc [--c99 --list --split_sections --debug -c --asm --interleave -o..\Output\sc32f1xxx_rcc.o --asm_dir=..\List --list_dir=..\List --cpu=Cortex-M0+ --apcs=interwork -O0 -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -DSC32f10xx -D__UVISION_VERSION=536 ..\FWLib\SC32F1XXX_Lib\src\sc32f1xxx_rcc.c]
                          THUMB
                          AREA ||i.RCC_AHBPeriphClockCmd||, CODE, READONLY, ALIGN=2
                  RCC_AHBPeriphClockCmd PROC
;;;725      */
;;;726    void RCC_AHBPeriphClockCmd ( uint32_t RCC_AHBPeriph, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;727    {
;;;728        
;;;729        assert_param ( IS_RCC_AHBPERIPH ( RCC_AHBPeriph ) );
;;;730    
;;;731        if ( NewState != DISABLE )
000002  d005              BEQ      |L1.16|
;;;732        {
;;;733            RCCAHB->AHB_CFG |= RCC_AHBPeriph;
000004  4a05              LDR      r2,|L1.28|
000006  6812              LDR      r2,[r2,#0]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L1.28|
00000c  601a              STR      r2,[r3,#0]
00000e  e004              B        |L1.26|
                  |L1.16|
;;;734        }
;;;735        else
;;;736        {
;;;737            RCCAHB->AHB_CFG &= ~RCC_AHBPeriph;
000010  4a02              LDR      r2,|L1.28|
000012  6812              LDR      r2,[r2,#0]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L1.28|
000018  601a              STR      r2,[r3,#0]
                  |L1.26|
;;;738        }
;;;739    }
00001a  4770              BX       lr
;;;740    
                          ENDP
                  |L1.28|
                          DCD      0x40003000
                          AREA ||i.RCC_AHBPeriphResetCmd||, CODE, READONLY, ALIGN=2
                  RCC_AHBPeriphResetCmd PROC
;;;854     */
;;;855    void RCC_AHBPeriphResetCmd ( uint32_t RCC_AHBPeriph, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;856    {
;;;857        
;;;858        assert_param ( IS_RCC_AHBPERIPH ( RCC_AHBPeriph ) );
;;;859    
;;;860        if ( NewState != DISABLE )
000002  d005              BEQ      |L2.16|
;;;861        {
;;;862            RCCAHB->AHB_RST |= RCC_AHBPeriph;
000004  4a05              LDR      r2,|L2.28|
000006  6852              LDR      r2,[r2,#4]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L2.28|
00000c  605a              STR      r2,[r3,#4]
00000e  e004              B        |L2.26|
                  |L2.16|
;;;863        }
;;;864        else
;;;865        {
;;;866            RCCAHB->AHB_RST &= ~RCC_AHBPeriph;
000010  4a02              LDR      r2,|L2.28|
000012  6852              LDR      r2,[r2,#4]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L2.28|
000018  605a              STR      r2,[r3,#4]
                  |L2.26|
;;;867        }
;;;868    }
00001a  4770              BX       lr
;;;869    
                          ENDP
                  |L2.28|
                          DCD      0x40003000
                          AREA ||i.RCC_APB0Cmd||, CODE, READONLY, ALIGN=2
                  RCC_APB0Cmd PROC
;;;257      */
;;;258    void RCC_APB0Cmd ( FunctionalState NewState )
000000  2800              CMP      r0,#0
;;;259    {
;;;260        
;;;261        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;262    
;;;263        if ( NewState != DISABLE )
000002  d007              BEQ      |L3.20|
;;;264        {
;;;265            RCCAPB0->APB0_CFG |= APB0_CFG_ENAPB;
000004  4907              LDR      r1,|L3.36|
000006  6809              LDR      r1,[r1,#0]
000008  2201              MOVS     r2,#1
00000a  05d2              LSLS     r2,r2,#23
00000c  4311              ORRS     r1,r1,r2
00000e  4a05              LDR      r2,|L3.36|
000010  6011              STR      r1,[r2,#0]
000012  e006              B        |L3.34|
                  |L3.20|
;;;266        }
;;;267        else
;;;268        {
;;;269            RCCAPB0->APB0_CFG &= ~APB0_CFG_ENAPB;
000014  4903              LDR      r1,|L3.36|
000016  6809              LDR      r1,[r1,#0]
000018  2201              MOVS     r2,#1
00001a  05d2              LSLS     r2,r2,#23
00001c  4391              BICS     r1,r1,r2
00001e  4a01              LDR      r2,|L3.36|
000020  6011              STR      r1,[r2,#0]
                  |L3.34|
;;;270        }
;;;271    }
000022  4770              BX       lr
;;;272    
                          ENDP
                  |L3.36|
                          DCD      0x40020000
                          AREA ||i.RCC_APB0Config||, CODE, READONLY, ALIGN=2
                  RCC_APB0Config PROC
;;;495     */
;;;496    void RCC_APB0Config ( RCC_PCLK_TypeDef RCC_APB0CLK )
000000  4905              LDR      r1,|L4.24|
;;;497    {
;;;498        
;;;499        assert_param ( IS_RCC_PCLK ( RCC_APB0CLK ) );
;;;500    
;;;501        RCCAPB0->APB0_CFG &= ~ ( ( uint32_t ) APB0_CFG_CLKDIV );
000002  6809              LDR      r1,[r1,#0]
000004  2207              MOVS     r2,#7
000006  0512              LSLS     r2,r2,#20
000008  4391              BICS     r1,r1,r2
00000a  4a03              LDR      r2,|L4.24|
00000c  6011              STR      r1,[r2,#0]
;;;502        RCCAPB0->APB0_CFG |= RCC_APB0CLK;
00000e  4611              MOV      r1,r2
000010  6809              LDR      r1,[r1,#0]
000012  4301              ORRS     r1,r1,r0
000014  6011              STR      r1,[r2,#0]
;;;503    }
000016  4770              BX       lr
;;;504    
                          ENDP
                  |L4.24|
                          DCD      0x40020000
                          AREA ||i.RCC_APB0PeriphClockCmd||, CODE, READONLY, ALIGN=2
                  RCC_APB0PeriphClockCmd PROC
;;;762      */
;;;763    void RCC_APB0PeriphClockCmd ( uint32_t RCC_APB0Periph, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;764    {
;;;765        
;;;766        assert_param ( IS_RCC_APB0PERIPH ( RCC_APB0Periph ) );
;;;767    
;;;768        if ( NewState != DISABLE )
000002  d005              BEQ      |L5.16|
;;;769        {
;;;770            RCCAPB0->APB0_CFG |= RCC_APB0Periph;
000004  4a05              LDR      r2,|L5.28|
000006  6812              LDR      r2,[r2,#0]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L5.28|
00000c  601a              STR      r2,[r3,#0]
00000e  e004              B        |L5.26|
                  |L5.16|
;;;771        }
;;;772        else
;;;773        {
;;;774            RCCAPB0->APB0_CFG &= ~RCC_APB0Periph;
000010  4a02              LDR      r2,|L5.28|
000012  6812              LDR      r2,[r2,#0]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L5.28|
000018  601a              STR      r2,[r3,#0]
                  |L5.26|
;;;775        }
;;;776    }
00001a  4770              BX       lr
;;;777    
                          ENDP
                  |L5.28|
                          DCD      0x40020000
                          AREA ||i.RCC_APB0PeriphResetCmd||, CODE, READONLY, ALIGN=2
                  RCC_APB0PeriphResetCmd PROC
;;;890     */
;;;891    void RCC_APB0PeriphResetCmd ( uint32_t RCC_APB0Periph, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;892    {
;;;893        
;;;894        assert_param ( IS_RCC_APB0PERIPH ( RCC_APB0Periph ) );
;;;895    
;;;896        if ( NewState != DISABLE )
000002  d005              BEQ      |L6.16|
;;;897        {
;;;898            RCCAPB0->APB0_RST |= RCC_APB0Periph;
000004  4a05              LDR      r2,|L6.28|
000006  6852              LDR      r2,[r2,#4]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L6.28|
00000c  605a              STR      r2,[r3,#4]
00000e  e004              B        |L6.26|
                  |L6.16|
;;;899        }
;;;900        else
;;;901        {
;;;902            RCCAPB0->APB0_RST &= ~RCC_APB0Periph;
000010  4a02              LDR      r2,|L6.28|
000012  6852              LDR      r2,[r2,#4]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L6.28|
000018  605a              STR      r2,[r3,#4]
                  |L6.26|
;;;903        }
;;;904    }
00001a  4770              BX       lr
;;;905    
                          ENDP
                  |L6.28|
                          DCD      0x40020000
                          AREA ||i.RCC_APB1Cmd||, CODE, READONLY, ALIGN=2
                  RCC_APB1Cmd PROC
;;;279      */
;;;280    void RCC_APB1Cmd ( FunctionalState NewState )
000000  2800              CMP      r0,#0
;;;281    {
;;;282        
;;;283        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;284    
;;;285        if ( NewState != DISABLE )
000002  d007              BEQ      |L7.20|
;;;286        {
;;;287            RCCAPB1->APB1_CFG |= APB1_CFG_ENAPB;
000004  4907              LDR      r1,|L7.36|
000006  6809              LDR      r1,[r1,#0]
000008  2201              MOVS     r2,#1
00000a  05d2              LSLS     r2,r2,#23
00000c  4311              ORRS     r1,r1,r2
00000e  4a05              LDR      r2,|L7.36|
000010  6011              STR      r1,[r2,#0]
000012  e006              B        |L7.34|
                  |L7.20|
;;;288        }
;;;289        else
;;;290        {
;;;291            RCCAPB1->APB1_CFG &= ~APB1_CFG_ENAPB;
000014  4903              LDR      r1,|L7.36|
000016  6809              LDR      r1,[r1,#0]
000018  2201              MOVS     r2,#1
00001a  05d2              LSLS     r2,r2,#23
00001c  4391              BICS     r1,r1,r2
00001e  4a01              LDR      r2,|L7.36|
000020  6011              STR      r1,[r2,#0]
                  |L7.34|
;;;292        }
;;;293    }
000022  4770              BX       lr
;;;294    
                          ENDP
                  |L7.36|
                          DCD      0x40021000
                          AREA ||i.RCC_APB1Config||, CODE, READONLY, ALIGN=2
                  RCC_APB1Config PROC
;;;517     */
;;;518    void RCC_APB1Config ( RCC_PCLK_TypeDef RCC_APB1CLK )
000000  4905              LDR      r1,|L8.24|
;;;519    {
;;;520        
;;;521        assert_param ( IS_RCC_PCLK ( RCC_APB1CLK ) );
;;;522    
;;;523        RCCAPB1->APB1_CFG &= ~ ( ( uint32_t ) APB1_CFG_CLKDIV );
000002  6809              LDR      r1,[r1,#0]
000004  2207              MOVS     r2,#7
000006  0512              LSLS     r2,r2,#20
000008  4391              BICS     r1,r1,r2
00000a  4a03              LDR      r2,|L8.24|
00000c  6011              STR      r1,[r2,#0]
;;;524        RCCAPB1->APB1_CFG |= RCC_APB1CLK;
00000e  4611              MOV      r1,r2
000010  6809              LDR      r1,[r1,#0]
000012  4301              ORRS     r1,r1,r0
000014  6011              STR      r1,[r2,#0]
;;;525    }
000016  4770              BX       lr
;;;526    
                          ENDP
                  |L8.24|
                          DCD      0x40021000
                          AREA ||i.RCC_APB1PeriphClockCmd||, CODE, READONLY, ALIGN=2
                  RCC_APB1PeriphClockCmd PROC
;;;796      */
;;;797    void RCC_APB1PeriphClockCmd ( uint32_t RCC_APB1Periph, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;798    {
;;;799        
;;;800        assert_param ( IS_RCC_APB1PERIPH ( RCC_APB1Periph ) );
;;;801    
;;;802        if ( NewState != DISABLE )
000002  d005              BEQ      |L9.16|
;;;803        {
;;;804            RCCAPB1->APB1_CFG |= RCC_APB1Periph;
000004  4a05              LDR      r2,|L9.28|
000006  6812              LDR      r2,[r2,#0]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L9.28|
00000c  601a              STR      r2,[r3,#0]
00000e  e004              B        |L9.26|
                  |L9.16|
;;;805        }
;;;806        else
;;;807        {
;;;808            RCCAPB1->APB1_CFG &= ~RCC_APB1Periph;
000010  4a02              LDR      r2,|L9.28|
000012  6812              LDR      r2,[r2,#0]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L9.28|
000018  601a              STR      r2,[r3,#0]
                  |L9.26|
;;;809        }
;;;810    }
00001a  4770              BX       lr
;;;811    
                          ENDP
                  |L9.28|
                          DCD      0x40021000
                          AREA ||i.RCC_APB1PeriphResetCmd||, CODE, READONLY, ALIGN=2
                  RCC_APB1PeriphResetCmd PROC
;;;924     */
;;;925    void RCC_APB1PeriphResetCmd ( uint32_t RCC_APB1Periph, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;926    {
;;;927        
;;;928        assert_param ( IS_RCC_APB1PERIPH ( RCC_APB1Periph ) );
;;;929    
;;;930        if ( NewState != DISABLE )
000002  d005              BEQ      |L10.16|
;;;931        {
;;;932            RCCAPB1->APB1_RST |= RCC_APB1Periph;
000004  4a05              LDR      r2,|L10.28|
000006  6852              LDR      r2,[r2,#4]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L10.28|
00000c  605a              STR      r2,[r3,#4]
00000e  e004              B        |L10.26|
                  |L10.16|
;;;933        }
;;;934        else
;;;935        {
;;;936            RCCAPB1->APB1_RST &= ~RCC_APB1Periph;
000010  4a02              LDR      r2,|L10.28|
000012  6852              LDR      r2,[r2,#4]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L10.28|
000018  605a              STR      r2,[r3,#4]
                  |L10.26|
;;;937        }
;;;938    }
00001a  4770              BX       lr
;;;939    
                          ENDP
                  |L10.28|
                          DCD      0x40021000
                          AREA ||i.RCC_APB2Cmd||, CODE, READONLY, ALIGN=2
                  RCC_APB2Cmd PROC
;;;301      */
;;;302    void RCC_APB2Cmd ( FunctionalState NewState )
000000  2800              CMP      r0,#0
;;;303    {
;;;304        
;;;305        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;306    
;;;307        if ( NewState != DISABLE )
000002  d007              BEQ      |L11.20|
;;;308        {
;;;309            RCCAPB2->APB2_CFG |= APB2_CFG_ENAPB;
000004  4907              LDR      r1,|L11.36|
000006  6809              LDR      r1,[r1,#0]
000008  2201              MOVS     r2,#1
00000a  05d2              LSLS     r2,r2,#23
00000c  4311              ORRS     r1,r1,r2
00000e  4a05              LDR      r2,|L11.36|
000010  6011              STR      r1,[r2,#0]
000012  e006              B        |L11.34|
                  |L11.20|
;;;310        }
;;;311        else
;;;312        {
;;;313            RCCAPB2->APB2_CFG &= ~APB2_CFG_ENAPB;
000014  4903              LDR      r1,|L11.36|
000016  6809              LDR      r1,[r1,#0]
000018  2201              MOVS     r2,#1
00001a  05d2              LSLS     r2,r2,#23
00001c  4391              BICS     r1,r1,r2
00001e  4a01              LDR      r2,|L11.36|
000020  6011              STR      r1,[r2,#0]
                  |L11.34|
;;;314        }
;;;315    }
000022  4770              BX       lr
;;;316    
                          ENDP
                  |L11.36|
                          DCD      0x40022000
                          AREA ||i.RCC_APB2Config||, CODE, READONLY, ALIGN=2
                  RCC_APB2Config PROC
;;;539     */
;;;540    void RCC_APB2Config ( RCC_PCLK_TypeDef RCC_APB2CLK )
000000  4905              LDR      r1,|L12.24|
;;;541    {
;;;542        
;;;543        assert_param ( IS_RCC_PCLK ( RCC_APB2CLK ) );
;;;544    
;;;545        RCCAPB2->APB2_CFG &= ~ ( ( uint32_t ) APB2_CFG_CLKDIV );
000002  6809              LDR      r1,[r1,#0]
000004  2207              MOVS     r2,#7
000006  0512              LSLS     r2,r2,#20
000008  4391              BICS     r1,r1,r2
00000a  4a03              LDR      r2,|L12.24|
00000c  6011              STR      r1,[r2,#0]
;;;546        RCCAPB2->APB2_CFG |= RCC_APB2CLK;
00000e  4611              MOV      r1,r2
000010  6809              LDR      r1,[r1,#0]
000012  4301              ORRS     r1,r1,r0
000014  6011              STR      r1,[r2,#0]
;;;547    }
000016  4770              BX       lr
;;;548    
                          ENDP
                  |L12.24|
                          DCD      0x40022000
                          AREA ||i.RCC_APB2PeriphClockCmd||, CODE, READONLY, ALIGN=2
                  RCC_APB2PeriphClockCmd PROC
;;;823      */
;;;824    void RCC_APB2PeriphClockCmd ( uint32_t RCC_APB2Periph, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;825    {
;;;826        
;;;827        assert_param ( IS_RCC_APB2PERIPH ( RCC_APB2Periph ) );
;;;828    
;;;829        if ( NewState != DISABLE )
000002  d005              BEQ      |L13.16|
;;;830        {
;;;831            RCCAPB2->APB2_CFG |= RCC_APB2Periph;
000004  4a05              LDR      r2,|L13.28|
000006  6812              LDR      r2,[r2,#0]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L13.28|
00000c  601a              STR      r2,[r3,#0]
00000e  e004              B        |L13.26|
                  |L13.16|
;;;832        }
;;;833        else
;;;834        {
;;;835            RCCAPB2->APB2_CFG &= ~RCC_APB2Periph;
000010  4a02              LDR      r2,|L13.28|
000012  6812              LDR      r2,[r2,#0]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L13.28|
000018  601a              STR      r2,[r3,#0]
                  |L13.26|
;;;836        }
;;;837    }
00001a  4770              BX       lr
;;;838    
                          ENDP
                  |L13.28|
                          DCD      0x40022000
                          AREA ||i.RCC_APB2PeriphResetCmd||, CODE, READONLY, ALIGN=2
                  RCC_APB2PeriphResetCmd PROC
;;;951     */
;;;952    void RCC_APB2PeriphResetCmd ( uint32_t RCC_APB2Periph, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;953    {
;;;954        
;;;955        assert_param ( IS_RCC_APB2PERIPH ( RCC_APB2Periph ) );
;;;956    
;;;957        if ( NewState != DISABLE )
000002  d005              BEQ      |L14.16|
;;;958        {
;;;959            RCCAPB2->APB2_RST |= RCC_APB2Periph;
000004  4a05              LDR      r2,|L14.28|
000006  6852              LDR      r2,[r2,#4]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L14.28|
00000c  605a              STR      r2,[r3,#4]
00000e  e004              B        |L14.26|
                  |L14.16|
;;;960        }
;;;961        else
;;;962        {
;;;963            RCCAPB2->APB2_RST &= ~RCC_APB2Periph;
000010  4a02              LDR      r2,|L14.28|
000012  6852              LDR      r2,[r2,#4]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L14.28|
000018  605a              STR      r2,[r3,#4]
                  |L14.26|
;;;964        }
;;;965    }
00001a  4770              BX       lr
;;;966    
                          ENDP
                  |L14.28|
                          DCD      0x40022000
                          AREA ||i.RCC_BTMCLKConfig||, CODE, READONLY, ALIGN=2
                  RCC_BTMCLKConfig PROC
;;;698     */
;;;699    void RCC_BTMCLKConfig ( RCC_BTMCLKSource_TypeDef RCC_BTMCLKSource )
000000  b500              PUSH     {lr}
;;;700    {
000002  4602              MOV      r2,r0
;;;701        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;702        
;;;703        assert_param ( RCC_BTMCLKSOURCE ( RCC_BTMCLKSource ) );
;;;704    
;;;705        RCC->RCC_CFG1 &= ~ ( ( uint32_t ) RCC_CFG1_BTMCLKSEL );
00000a  4805              LDR      r0,|L15.32|
00000c  6980              LDR      r0,[r0,#0x18]
00000e  0840              LSRS     r0,r0,#1
000010  0040              LSLS     r0,r0,#1
000012  4903              LDR      r1,|L15.32|
000014  6188              STR      r0,[r1,#0x18]
;;;706        RCC->RCC_CFG1 |= ( uint32_t ) ( RCC_BTMCLKSource );
000016  4608              MOV      r0,r1
000018  6980              LDR      r0,[r0,#0x18]
00001a  4310              ORRS     r0,r0,r2
00001c  6188              STR      r0,[r1,#0x18]
;;;707    }
00001e  bd00              POP      {pc}
;;;708    
                          ENDP
                  |L15.32|
                          DCD      0x40003000
                          AREA ||i.RCC_DeInit||, CODE, READONLY, ALIGN=2
                  RCC_DeInit PROC
;;;45      */
;;;46     void RCC_DeInit ( void )
000000  2040              MOVS     r0,#0x40
;;;47     {
;;;48         
;;;49         RCC->RCC_KEY = 0x40;
000002  4905              LDR      r1,|L16.24|
000004  60c8              STR      r0,[r1,#0xc]
;;;50     
;;;51         
;;;52         RCC->RCC_CFG0 = ( uint32_t ) 0x00001040;
000006  2041              MOVS     r0,#0x41
000008  0180              LSLS     r0,r0,#6
00000a  6148              STR      r0,[r1,#0x14]
;;;53     
;;;54         
;;;55         RCC->RCC_CFG1 = ( uint32_t ) 0x00000000;
00000c  2000              MOVS     r0,#0
00000e  6188              STR      r0,[r1,#0x18]
;;;56     
;;;57     #if defined(SC32f10xx)
;;;58         
;;;59         RCC->PLL_CFG = ( uint32_t ) 0x00000000;
000010  61c8              STR      r0,[r1,#0x1c]
;;;60     #endif
;;;61     
;;;62         
;;;63         RCC->NMI_CFG = ( uint32_t ) 0x00000000;
000012  62c8              STR      r0,[r1,#0x2c]
;;;64     
;;;65     }
000014  4770              BX       lr
;;;66     
                          ENDP
000016  0000              DCW      0x0000
                  |L16.24|
                          DCD      0x40003000
                          AREA ||i.RCC_GetClocksFreq||, CODE, READONLY, ALIGN=2
                  RCC_GetClocksFreq PROC
;;;554      */
;;;555    void RCC_GetClocksFreq ( RCC_ClocksTypeDef* RCC_Clocks )
000000  b5fe              PUSH     {r1-r7,lr}
;;;556    {
000002  4604              MOV      r4,r0
;;;557        uint32_t  tmp;
;;;558    
;;;559    #if defined(SC32f10xx)
;;;560        uint32_t  pllp, pllsource, pllm, plln;
;;;561    #endif
;;;562    
;;;563        
;;;564        if ( ( RCC->RCC_CFG0 & RCC_CFG0_SYSCLKSW ) == RESET )
000004  4836              LDR      r0,|L17.224|
000006  6940              LDR      r0,[r0,#0x14]
000008  2180              MOVS     r1,#0x80
00000a  4008              ANDS     r0,r0,r1
00000c  2800              CMP      r0,#0
00000e  d102              BNE      |L17.22|
;;;565        {
;;;566    #if defined(SC32f10xx)
;;;567            RCC_Clocks->SYSCLK_Frequency = HIRC_VALUE;
000010  4834              LDR      r0,|L17.228|
000012  6020              STR      r0,[r4,#0]
000014  e045              B        |L17.162|
                  |L17.22|
;;;568    #elif defined(SC32f11xx) ||defined(SC32f12xx)
;;;569            RCC_Clocks->SYSCLK_Frequency = HIRC_VALUE / 2;
;;;570    #endif
;;;571        }
;;;572        else
;;;573        {
;;;574            switch ( RCC->RCC_CFG0 & RCC_CFG0_SYSCLKSEL )
000016  4832              LDR      r0,|L17.224|
000018  6940              LDR      r0,[r0,#0x14]
00001a  2103              MOVS     r1,#3
00001c  0209              LSLS     r1,r1,#8
00001e  4008              ANDS     r0,r0,r1
000020  2800              CMP      r0,#0
000022  d00f              BEQ      |L17.68|
000024  38ff              SUBS     r0,r0,#0xff
000026  3801              SUBS     r0,#1
000028  2800              CMP      r0,#0
00002a  d008              BEQ      |L17.62|
00002c  38ff              SUBS     r0,r0,#0xff
00002e  3801              SUBS     r0,#1
000030  2800              CMP      r0,#0
000032  d00f              BEQ      |L17.84|
000034  38ff              SUBS     r0,r0,#0xff
000036  3801              SUBS     r0,#1
000038  2800              CMP      r0,#0
00003a  d131              BNE      |L17.160|
00003c  e006              B        |L17.76|
                  |L17.62|
;;;575            {
;;;576            case RCC_SYSCLKSource_HXT:   
;;;577                RCC_Clocks->SYSCLK_Frequency = HXT_VALUE;
00003e  482a              LDR      r0,|L17.232|
000040  6020              STR      r0,[r4,#0]
;;;578                break;
000042  e02d              B        |L17.160|
                  |L17.68|
;;;579            case RCC_SYSCLKSource_LIRC:   
;;;580                RCC_Clocks->SYSCLK_Frequency = LIRC_VALUE;
000044  207d              MOVS     r0,#0x7d
000046  0200              LSLS     r0,r0,#8
000048  6020              STR      r0,[r4,#0]
;;;581                break;
00004a  e029              B        |L17.160|
                  |L17.76|
;;;582            case RCC_SYSCLKSource_LXT:   
;;;583                RCC_Clocks->SYSCLK_Frequency = LXT_VALUE;
00004c  2001              MOVS     r0,#1
00004e  03c0              LSLS     r0,r0,#15
000050  6020              STR      r0,[r4,#0]
;;;584                break;
000052  e025              B        |L17.160|
                  |L17.84|
;;;585    #if defined(SC32f11xx) ||defined(SC32f12xx)
;;;586            case RCC_SYSCLKSource_HIRC_2:   
;;;587                RCC_Clocks->SYSCLK_Frequency = HIRC_VALUE;
;;;588                break;
;;;589    #elif defined(SC32f10xx)
;;;590            case RCC_SYSCLKSource_PLLRCLK:   
;;;591                if ( ( RCC->PLL_CFG & PLL_CFG_PLLCLKSEL ) == RESET ) 
000054  4822              LDR      r0,|L17.224|
000056  69c0              LDR      r0,[r0,#0x1c]
000058  2101              MOVS     r1,#1
00005a  05c9              LSLS     r1,r1,#23
00005c  4008              ANDS     r0,r0,r1
00005e  2800              CMP      r0,#0
000060  d101              BNE      |L17.102|
;;;592                {
;;;593                    pllsource = HIRC_VALUE;
000062  4e20              LDR      r6,|L17.228|
000064  e000              B        |L17.104|
                  |L17.102|
;;;594                }
;;;595                else   
;;;596                {
;;;597                    pllsource = HXT_VALUE;
000066  4e20              LDR      r6,|L17.232|
                  |L17.104|
;;;598                }
;;;599    
;;;600                pllm = ( ( RCC->PLL_CFG & PLL_CFG_MDIVM ) >> PLL_CFG_MDIVM_Pos );
000068  481d              LDR      r0,|L17.224|
00006a  69c0              LDR      r0,[r0,#0x1c]
00006c  211f              MOVS     r1,#0x1f
00006e  0409              LSLS     r1,r1,#16
000070  4008              ANDS     r0,r0,r1
000072  0c00              LSRS     r0,r0,#16
000074  9001              STR      r0,[sp,#4]
;;;601                plln = ( ( RCC->PLL_CFG & PLL_CFG_NDIVN ) >> PLL_CFG_NDIVN_Pos );
000076  481a              LDR      r0,|L17.224|
000078  69c0              LDR      r0,[r0,#0x1c]
00007a  21ff              MOVS     r1,#0xff
00007c  0209              LSLS     r1,r1,#8
00007e  4008              ANDS     r0,r0,r1
000080  0a01              LSRS     r1,r0,#8
000082  9100              STR      r1,[sp,#0]
;;;602                pllp = ( ( RCC->PLL_CFG & PLL_CFG_PDIVP ) >> PLL_CFG_PDIVP_Pos );
000084  4816              LDR      r0,|L17.224|
000086  69c0              LDR      r0,[r0,#0x1c]
000088  0787              LSLS     r7,r0,#30
00008a  0fbf              LSRS     r7,r7,#30
;;;603    
;;;604                RCC_Clocks->SYSCLK_Frequency = ( ( ( pllsource / pllm ) * plln ) >> ( pllp + 1 ) );
00008c  4630              MOV      r0,r6
00008e  9901              LDR      r1,[sp,#4]
000090  f7fffffe          BL       __aeabi_uidivmod
000094  9900              LDR      r1,[sp,#0]
000096  4348              MULS     r0,r1,r0
000098  1c79              ADDS     r1,r7,#1
00009a  40c8              LSRS     r0,r0,r1
00009c  6020              STR      r0,[r4,#0]
;;;605                break;
00009e  bf00              NOP      
                  |L17.160|
0000a0  bf00              NOP                            ;578
                  |L17.162|
;;;606    #endif
;;;607            }
;;;608        }
;;;609    
;;;610        
;;;611        tmp = ( ( RCCAHB->AHB_CFG & AHB_CFG_CLKDIV ) >> AHB_CFG_CLKDIV_Pos );
0000a2  480f              LDR      r0,|L17.224|
0000a4  6800              LDR      r0,[r0,#0]
0000a6  2107              MOVS     r1,#7
0000a8  0509              LSLS     r1,r1,#20
0000aa  4008              ANDS     r0,r0,r1
0000ac  0d05              LSRS     r5,r0,#20
;;;612        RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> tmp;
0000ae  6820              LDR      r0,[r4,#0]
0000b0  40e8              LSRS     r0,r0,r5
0000b2  6060              STR      r0,[r4,#4]
;;;613    
;;;614        
;;;615        tmp = ( ( RCCAPB0->APB0_CFG & APB0_CFG_CLKDIV ) >> APB0_CFG_CLKDIV_Pos );
0000b4  480d              LDR      r0,|L17.236|
0000b6  6800              LDR      r0,[r0,#0]
0000b8  4008              ANDS     r0,r0,r1
0000ba  0d05              LSRS     r5,r0,#20
;;;616        RCC_Clocks->PCLK0_Frequency = RCC_Clocks->HCLK_Frequency >> tmp;
0000bc  6860              LDR      r0,[r4,#4]
0000be  40e8              LSRS     r0,r0,r5
0000c0  60a0              STR      r0,[r4,#8]
;;;617    
;;;618        
;;;619        tmp = ( ( RCCAPB1->APB1_CFG & APB1_CFG_CLKDIV ) >> APB1_CFG_CLKDIV_Pos );
0000c2  480b              LDR      r0,|L17.240|
0000c4  6800              LDR      r0,[r0,#0]
0000c6  4008              ANDS     r0,r0,r1
0000c8  0d05              LSRS     r5,r0,#20
;;;620        RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> tmp;
0000ca  6860              LDR      r0,[r4,#4]
0000cc  40e8              LSRS     r0,r0,r5
0000ce  60e0              STR      r0,[r4,#0xc]
;;;621    
;;;622        
;;;623        tmp = ( ( RCCAPB2->APB2_CFG & APB2_CFG_CLKDIV ) >> APB2_CFG_CLKDIV_Pos );
0000d0  4808              LDR      r0,|L17.244|
0000d2  6800              LDR      r0,[r0,#0]
0000d4  4008              ANDS     r0,r0,r1
0000d6  0d05              LSRS     r5,r0,#20
;;;624        RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> tmp;
0000d8  6860              LDR      r0,[r4,#4]
0000da  40e8              LSRS     r0,r0,r5
0000dc  6120              STR      r0,[r4,#0x10]
;;;625    }
0000de  bdfe              POP      {r1-r7,pc}
;;;626    
                          ENDP
                  |L17.224|
                          DCD      0x40003000
                  |L17.228|
                          DCD      0x01e84800
                  |L17.232|
                          DCD      0x00f42400
                  |L17.236|
                          DCD      0x40020000
                  |L17.240|
                          DCD      0x40021000
                  |L17.244|
                          DCD      0x40022000
                          AREA ||i.RCC_GetFlagStatus||, CODE, READONLY, ALIGN=2
                  RCC_GetFlagStatus PROC
;;;1142    */
;;;1143   FlagStatus RCC_GetFlagStatus ( uint32_t RCC_FLAG )
000000  4601              MOV      r1,r0
;;;1144   {
;;;1145       
;;;1146       assert_param ( IS_GET_RCC_FLAG ( RCC_FLAG ) );
;;;1147   
;;;1148       if( ( RCC->RCC_STS & RCC_FLAG ) != ( uint32_t ) RESET )
000002  4804              LDR      r0,|L18.20|
000004  6a00              LDR      r0,[r0,#0x20]
000006  4008              ANDS     r0,r0,r1
000008  2800              CMP      r0,#0
00000a  d001              BEQ      |L18.16|
;;;1149       {
;;;1150           return ( SET );
00000c  2001              MOVS     r0,#1
                  |L18.14|
;;;1151       }
;;;1152       return ( RESET );
;;;1153   }
00000e  4770              BX       lr
                  |L18.16|
000010  2000              MOVS     r0,#0                 ;1152
000012  e7fc              B        |L18.14|
;;;1154   
                          ENDP
                  |L18.20|
                          DCD      0x40003000
                          AREA ||i.RCC_GetSYSCLKSource||, CODE, READONLY, ALIGN=2
                  RCC_GetSYSCLKSource PROC
;;;446      */
;;;447    RCC_SYSCLKSource_TypeDef RCC_GetSYSCLKSource ( void )
000000  4806              LDR      r0,|L19.28|
;;;448    {
;;;449        if ( ( RCC->RCC_CFG0 & RCC_CFG0_SYSCLKSW ) != RESET )
000002  6940              LDR      r0,[r0,#0x14]
000004  2180              MOVS     r1,#0x80
000006  4008              ANDS     r0,r0,r1
000008  2800              CMP      r0,#0
00000a  d005              BEQ      |L19.24|
;;;450        {
;;;451            return ( ( RCC_SYSCLKSource_TypeDef ) ( RCC->RCC_CFG0 & RCC_CFG0_SYSCLKSEL ) );
00000c  4803              LDR      r0,|L19.28|
00000e  6940              LDR      r0,[r0,#0x14]
000010  2103              MOVS     r1,#3
000012  0209              LSLS     r1,r1,#8
000014  4008              ANDS     r0,r0,r1
                  |L19.22|
;;;452        }
;;;453        else
;;;454        {
;;;455    #if defined (SC32f10xx)
;;;456            return RCC_SYSCLKSource_HIRC;
;;;457    #elif defined (SC32f11xx) ||  defined (SC32f12xx)
;;;458            return RCC_SYSCLKSource_HIRC_2;
;;;459    #endif
;;;460        }
;;;461    
;;;462    }
000016  4770              BX       lr
                  |L19.24|
000018  4801              LDR      r0,|L19.32|
00001a  e7fc              B        |L19.22|
;;;463    
                          ENDP
                  |L19.28|
                          DCD      0x40003000
                  |L19.32|
                          DCD      0x0000ff7f
                          AREA ||i.RCC_HCLKConfig||, CODE, READONLY, ALIGN=2
                  RCC_HCLKConfig PROC
;;;473     */
;;;474    void RCC_HCLKConfig ( RCC_HCLK_TypeDef RCC_HCLK )
000000  4905              LDR      r1,|L20.24|
;;;475    {
;;;476        
;;;477        assert_param ( IS_RCC_HCLK ( RCC_HCLK ) );
;;;478    
;;;479        RCCAHB->AHB_CFG &= ( uint32_t ) ~ ( AHB_CFG_CLKDIV );
000002  6809              LDR      r1,[r1,#0]
000004  2207              MOVS     r2,#7
000006  0512              LSLS     r2,r2,#20
000008  4391              BICS     r1,r1,r2
00000a  4a03              LDR      r2,|L20.24|
00000c  6011              STR      r1,[r2,#0]
;;;480        RCCAHB->AHB_CFG |= RCC_HCLK;
00000e  4611              MOV      r1,r2
000010  6809              LDR      r1,[r1,#0]
000012  4301              ORRS     r1,r1,r0
000014  6011              STR      r1,[r2,#0]
;;;481    }
000016  4770              BX       lr
;;;482    
                          ENDP
                  |L20.24|
                          DCD      0x40003000
                          AREA ||i.RCC_HIRCCmd||, CODE, READONLY, ALIGN=2
                  RCC_HIRCCmd PROC
;;;118      */
;;;119    void RCC_HIRCCmd ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;120    {
000002  4602              MOV      r2,r0
;;;121        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;122        if ( NewState != DISABLE )
00000a  2a00              CMP      r2,#0
00000c  d006              BEQ      |L21.28|
;;;123        {
;;;124            
;;;125            RCC->RCC_CFG0 |= RCC_CFG0_HIRCEN;
00000e  4807              LDR      r0,|L21.44|
000010  6940              LDR      r0,[r0,#0x14]
000012  2140              MOVS     r1,#0x40
000014  4308              ORRS     r0,r0,r1
000016  4905              LDR      r1,|L21.44|
000018  6148              STR      r0,[r1,#0x14]
00001a  e005              B        |L21.40|
                  |L21.28|
;;;126        }
;;;127        else
;;;128        {
;;;129            
;;;130            RCC->RCC_CFG0 &= ( uint32_t ) ~ ( ( uint32_t ) RCC_CFG0_HIRCEN );
00001c  4803              LDR      r0,|L21.44|
00001e  6940              LDR      r0,[r0,#0x14]
000020  2140              MOVS     r1,#0x40
000022  4388              BICS     r0,r0,r1
000024  4901              LDR      r1,|L21.44|
000026  6148              STR      r0,[r1,#0x14]
                  |L21.40|
;;;131        }
;;;132    }
000028  bd00              POP      {pc}
;;;133    
                          ENDP
00002a  0000              DCW      0x0000
                  |L21.44|
                          DCD      0x40003000
                          AREA ||i.RCC_HXTCmd||, CODE, READONLY, ALIGN=2
                  RCC_HXTCmd PROC
;;;96       */
;;;97     void RCC_HXTCmd ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;98     {
000002  4602              MOV      r2,r0
;;;99         RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;100        if ( NewState != DISABLE )
00000a  2a00              CMP      r2,#0
00000c  d006              BEQ      |L22.28|
;;;101        {
;;;102            
;;;103            RCC->RCC_CFG0 |= RCC_CFG0_HXTEN;
00000e  4807              LDR      r0,|L22.44|
000010  6940              LDR      r0,[r0,#0x14]
000012  2120              MOVS     r1,#0x20
000014  4308              ORRS     r0,r0,r1
000016  4905              LDR      r1,|L22.44|
000018  6148              STR      r0,[r1,#0x14]
00001a  e005              B        |L22.40|
                  |L22.28|
;;;104        }
;;;105        else
;;;106        {
;;;107            
;;;108            RCC->RCC_CFG0 &= ( uint32_t ) ~ ( ( uint32_t ) RCC_CFG0_HXTEN );
00001c  4803              LDR      r0,|L22.44|
00001e  6940              LDR      r0,[r0,#0x14]
000020  2120              MOVS     r1,#0x20
000022  4388              BICS     r0,r0,r1
000024  4901              LDR      r1,|L22.44|
000026  6148              STR      r0,[r1,#0x14]
                  |L22.40|
;;;109        }
;;;110    }
000028  bd00              POP      {pc}
;;;111    
                          ENDP
00002a  0000              DCW      0x0000
                  |L22.44|
                          DCD      0x40003000
                          AREA ||i.RCC_ITConfig||, CODE, READONLY, ALIGN=2
                  RCC_ITConfig PROC
;;;1116     */
;;;1117   void RCC_ITConfig ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;1118   {
000002  4602              MOV      r2,r0
;;;1119       RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;1120       if ( NewState != DISABLE )
00000a  2a00              CMP      r2,#0
00000c  d007              BEQ      |L23.30|
;;;1121       {
;;;1122           RCC->RCC_CFG0 |= RCC_CFG0_INTEN;
00000e  4808              LDR      r0,|L23.48|
000010  6940              LDR      r0,[r0,#0x14]
000012  2101              MOVS     r1,#1
000014  03c9              LSLS     r1,r1,#15
000016  4308              ORRS     r0,r0,r1
000018  4905              LDR      r1,|L23.48|
00001a  6148              STR      r0,[r1,#0x14]
00001c  e006              B        |L23.44|
                  |L23.30|
;;;1123       }
;;;1124       else
;;;1125       {
;;;1126           RCC->RCC_CFG0 &= ( uint32_t ) ~ ( ( uint32_t ) RCC_CFG0_INTEN );
00001e  4804              LDR      r0,|L23.48|
000020  6940              LDR      r0,[r0,#0x14]
000022  2101              MOVS     r1,#1
000024  03c9              LSLS     r1,r1,#15
000026  4388              BICS     r0,r0,r1
000028  4901              LDR      r1,|L23.48|
00002a  6148              STR      r0,[r1,#0x14]
                  |L23.44|
;;;1127       }
;;;1128   }
00002c  bd00              POP      {pc}
;;;1129   
                          ENDP
00002e  0000              DCW      0x0000
                  |L23.48|
                          DCD      0x40003000
                          AREA ||i.RCC_LCDLEDCLKConfig||, CODE, READONLY, ALIGN=2
                  RCC_LCDLEDCLKConfig PROC
;;;681     */
;;;682    void RCC_LCDLEDCLKConfig ( RCC_LCDLEDCLKSource_TypeDef RCC_LCDLEDCLKSource )
000000  b500              PUSH     {lr}
;;;683    {
000002  4602              MOV      r2,r0
;;;684        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;685        
;;;686        assert_param ( RCC_LCDLEDCLKSOURCE ( RCC_LCDLEDCLKSource ) );
;;;687    
;;;688        RCC->RCC_CFG1 &= ~ ( ( uint32_t ) RCC_CFG1_LCDCLKSEL );
00000a  4805              LDR      r0,|L24.32|
00000c  6980              LDR      r0,[r0,#0x18]
00000e  2102              MOVS     r1,#2
000010  4388              BICS     r0,r0,r1
000012  4903              LDR      r1,|L24.32|
000014  6188              STR      r0,[r1,#0x18]
;;;689        RCC->RCC_CFG1 |= ( uint32_t ) ( RCC_LCDLEDCLKSource );
000016  4608              MOV      r0,r1
000018  6980              LDR      r0,[r0,#0x18]
00001a  4310              ORRS     r0,r0,r2
00001c  6188              STR      r0,[r1,#0x18]
;;;690    }
00001e  bd00              POP      {pc}
;;;691    
                          ENDP
                  |L24.32|
                          DCD      0x40003000
                          AREA ||i.RCC_LIRCCmd||, CODE, READONLY, ALIGN=2
                  RCC_LIRCCmd PROC
;;;162      */
;;;163    void RCC_LIRCCmd ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;164    {
000002  4602              MOV      r2,r0
;;;165        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;166        if ( NewState != DISABLE )
00000a  2a00              CMP      r2,#0
00000c  d006              BEQ      |L25.28|
;;;167        {
;;;168            
;;;169            RCC->RCC_CFG0 |= RCC_CFG0_LIRCEN;
00000e  4807              LDR      r0,|L25.44|
000010  6940              LDR      r0,[r0,#0x14]
000012  2102              MOVS     r1,#2
000014  4308              ORRS     r0,r0,r1
000016  4905              LDR      r1,|L25.44|
000018  6148              STR      r0,[r1,#0x14]
00001a  e005              B        |L25.40|
                  |L25.28|
;;;170        }
;;;171        else
;;;172        {
;;;173            
;;;174            RCC->RCC_CFG0 &= ( uint32_t ) ~ ( ( uint32_t ) RCC_CFG0_LIRCEN );
00001c  4803              LDR      r0,|L25.44|
00001e  6940              LDR      r0,[r0,#0x14]
000020  2102              MOVS     r1,#2
000022  4388              BICS     r0,r0,r1
000024  4901              LDR      r1,|L25.44|
000026  6148              STR      r0,[r1,#0x14]
                  |L25.40|
;;;175        }
;;;176    }
000028  bd00              POP      {pc}
;;;177    
                          ENDP
00002a  0000              DCW      0x0000
                  |L25.44|
                          DCD      0x40003000
                          AREA ||i.RCC_LXTCmd||, CODE, READONLY, ALIGN=2
                  RCC_LXTCmd PROC
;;;140      */
;;;141    void RCC_LXTCmd ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;142    {
000002  4602              MOV      r2,r0
;;;143        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;144        if ( NewState != DISABLE )
00000a  2a00              CMP      r2,#0
00000c  d006              BEQ      |L26.28|
;;;145        {
;;;146            
;;;147            RCC->RCC_CFG0 |= RCC_CFG0_LXTEN;
00000e  4807              LDR      r0,|L26.44|
000010  6940              LDR      r0,[r0,#0x14]
000012  2101              MOVS     r1,#1
000014  4308              ORRS     r0,r0,r1
000016  4905              LDR      r1,|L26.44|
000018  6148              STR      r0,[r1,#0x14]
00001a  e005              B        |L26.40|
                  |L26.28|
;;;148        }
;;;149        else
;;;150        {
;;;151            
;;;152            RCC->RCC_CFG0 &= ( uint32_t ) ~ ( ( uint32_t ) RCC_CFG0_LXTEN );
00001c  4803              LDR      r0,|L26.44|
00001e  6940              LDR      r0,[r0,#0x14]
000020  0840              LSRS     r0,r0,#1
000022  0040              LSLS     r0,r0,#1
000024  4901              LDR      r1,|L26.44|
000026  6148              STR      r0,[r1,#0x14]
                  |L26.40|
;;;153        }
;;;154    }
000028  bd00              POP      {pc}
;;;155    
                          ENDP
00002a  0000              DCW      0x0000
                  |L26.44|
                          DCD      0x40003000
                          AREA ||i.RCC_NMICmd||, CODE, READONLY, ALIGN=2
                  RCC_NMICmd PROC
;;;981     */
;;;982    void RCC_NMICmd ( uint32_t RCC_NMIPeriph, FunctionalState NewState )
000000  4602              MOV      r2,r0
;;;983    {
;;;984        uint32_t temp;
;;;985        
;;;986        assert_param ( IS_RCC_NMIPeriph ( RCC_NMIPeriph ) );
;;;987    
;;;988        temp = RCC->NMI_CFG;
000002  4b08              LDR      r3,|L27.36|
000004  6ad8              LDR      r0,[r3,#0x2c]
;;;989    
;;;990        temp &= ( ~RCC_NMIPeriph );
000006  4603              MOV      r3,r0
000008  4393              BICS     r3,r3,r2
00000a  4618              MOV      r0,r3
;;;991    
;;;992        if ( NewState != DISABLE )
00000c  2900              CMP      r1,#0
00000e  d003              BEQ      |L27.24|
;;;993        {
;;;994            temp |= 0xA05F0000 | RCC_NMIPeriph;
000010  4b05              LDR      r3,|L27.40|
000012  4313              ORRS     r3,r3,r2
000014  4318              ORRS     r0,r0,r3
000016  e001              B        |L27.28|
                  |L27.24|
;;;995        }
;;;996        else
;;;997        {
;;;998            temp |= 0xA05F0000;
000018  4b03              LDR      r3,|L27.40|
00001a  4318              ORRS     r0,r0,r3
                  |L27.28|
;;;999        }
;;;1000       RCC->NMI_CFG = temp;
00001c  4b01              LDR      r3,|L27.36|
00001e  62d8              STR      r0,[r3,#0x2c]
;;;1001   }
000020  4770              BX       lr
;;;1002   
                          ENDP
000022  0000              DCW      0x0000
                  |L27.36|
                          DCD      0x40003000
                  |L27.40|
                          DCD      0xa05f0000
                          AREA ||i.RCC_PLLCmd||, CODE, READONLY, ALIGN=2
                  RCC_PLLCmd PROC
;;;185      */
;;;186    void RCC_PLLCmd ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;187    {
000002  4602              MOV      r2,r0
;;;188        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;189        
;;;190        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;191    
;;;192        if ( NewState != DISABLE )
00000a  2a00              CMP      r2,#0
00000c  d006              BEQ      |L28.28|
;;;193        {
;;;194            
;;;195            RCC->PLL_CFG |= PLL_CFG_PLLON;
00000e  4807              LDR      r0,|L28.44|
000010  69c0              LDR      r0,[r0,#0x1c]
000012  2180              MOVS     r1,#0x80
000014  4308              ORRS     r0,r0,r1
000016  4905              LDR      r1,|L28.44|
000018  61c8              STR      r0,[r1,#0x1c]
00001a  e005              B        |L28.40|
                  |L28.28|
;;;196        }
;;;197        else
;;;198        {
;;;199            
;;;200            RCC->PLL_CFG &= ( uint32_t ) ~ ( ( uint32_t ) PLL_CFG_PLLON );
00001c  4803              LDR      r0,|L28.44|
00001e  69c0              LDR      r0,[r0,#0x1c]
000020  2180              MOVS     r1,#0x80
000022  4388              BICS     r0,r0,r1
000024  4901              LDR      r1,|L28.44|
000026  61c8              STR      r0,[r1,#0x1c]
                  |L28.40|
;;;201        }
;;;202    }
000028  bd00              POP      {pc}
;;;203    
                          ENDP
00002a  0000              DCW      0x0000
                  |L28.44|
                          DCD      0x40003000
                          AREA ||i.RCC_PLLConfig||, CODE, READONLY, ALIGN=2
                  RCC_PLLConfig PROC
;;;326     */
;;;327    void RCC_PLLConfig ( RCC_PLLCLKSource_TypeDef RCC_PLLCLKSource, RLL_Factor_TypeDef* RLL_Factor )
000000  b510              PUSH     {r4,lr}
;;;328    {
000002  4604              MOV      r4,r0
000004  460a              MOV      r2,r1
;;;329        RCC_Unlock ( 0xFF );
000006  20ff              MOVS     r0,#0xff
000008  f7fffffe          BL       RCC_Unlock
;;;330        uint32_t tmpreg;
;;;331        
;;;332        
;;;333        assert_param ( RCC_PLLCLKSOURCE ( RCC_PLLCLKSource ) );
;;;334    
;;;335        if ( 2 * RLL_Factor->PLLN )
00000c  6850              LDR      r0,[r2,#4]
00000e  0040              LSLS     r0,r0,#1
000010  2800              CMP      r0,#0
000012  d001              BEQ      |L29.24|
;;;336            tmpreg = RCC->PLL_CFG;
000014  4807              LDR      r0,|L29.52|
000016  69c3              LDR      r3,[r0,#0x1c]
                  |L29.24|
;;;337    
;;;338        tmpreg &= ( uint32_t ) ~ ( PLL_CFG_PLLCLKSEL | PLL_CFG_MDIVM | PLL_CFG_NDIVN | PLL_CFG_PDIVP );
000018  4807              LDR      r0,|L29.56|
00001a  4003              ANDS     r3,r3,r0
;;;339    
;;;340        tmpreg |= ( uint32_t ) ( RCC_PLLCLKSource | ( RLL_Factor->PLLM << PLL_CFG_MDIVM_Pos ) |
00001c  8810              LDRH     r0,[r2,#0]
00001e  0400              LSLS     r0,r0,#16
000020  4320              ORRS     r0,r0,r4
000022  6851              LDR      r1,[r2,#4]
000024  0209              LSLS     r1,r1,#8
000026  4308              ORRS     r0,r0,r1
000028  6891              LDR      r1,[r2,#8]
00002a  4308              ORRS     r0,r0,r1
00002c  4303              ORRS     r3,r3,r0
;;;341                                 ( RLL_Factor->PLLN << PLL_CFG_NDIVN_Pos ) | ( RLL_Factor->PLLP << PLL_CFG_PDIVP_Pos ) );
;;;342    
;;;343        RCC->PLL_CFG = tmpreg;
00002e  4801              LDR      r0,|L29.52|
000030  61c3              STR      r3,[r0,#0x1c]
;;;344    }
000032  bd10              POP      {r4,pc}
;;;345    #endif
                          ENDP
                  |L29.52|
                          DCD      0x40003000
                  |L29.56|
                          DCD      0xff6000fc
                          AREA ||i.RCC_PLLRCmd||, CODE, READONLY, ALIGN=2
                  RCC_PLLRCmd PROC
;;;210      */
;;;211    void RCC_PLLRCmd ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;212    {
000002  4602              MOV      r2,r0
;;;213        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;214        
;;;215        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;216    
;;;217        if ( NewState != DISABLE )
00000a  2a00              CMP      r2,#0
00000c  d006              BEQ      |L30.28|
;;;218        {
;;;219            RCC->PLL_CFG |= PLL_CFG_PLLREN;
00000e  4807              LDR      r0,|L30.44|
000010  69c0              LDR      r0,[r0,#0x1c]
000012  2140              MOVS     r1,#0x40
000014  4308              ORRS     r0,r0,r1
000016  4905              LDR      r1,|L30.44|
000018  61c8              STR      r0,[r1,#0x1c]
00001a  e005              B        |L30.40|
                  |L30.28|
;;;220        }
;;;221        else
;;;222        {
;;;223            RCC->PLL_CFG &= ( uint32_t ) ~ ( ( uint32_t ) PLL_CFG_PLLREN );
00001c  4803              LDR      r0,|L30.44|
00001e  69c0              LDR      r0,[r0,#0x1c]
000020  2140              MOVS     r1,#0x40
000022  4388              BICS     r0,r0,r1
000024  4901              LDR      r1,|L30.44|
000026  61c8              STR      r0,[r1,#0x1c]
                  |L30.40|
;;;224        }
;;;225    }
000028  bd00              POP      {pc}
;;;226    #endif
                          ENDP
00002a  0000              DCW      0x0000
                  |L30.44|
                          DCD      0x40003000
                          AREA ||i.RCC_SYSCLKConfig||, CODE, READONLY, ALIGN=2
                  RCC_SYSCLKConfig PROC
;;;375     */
;;;376    ErrorStatus RCC_SYSCLKConfig ( RCC_SYSCLKSource_TypeDef RCC_SYSCLKSource )
000000  b570              PUSH     {r4-r6,lr}
;;;377    {
000002  4604              MOV      r4,r0
;;;378        uint32_t tmpreg;
;;;379        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;380    
;;;381    
;;;382        
;;;383        assert_param ( IS_RCC_SYSCLKSOURCE ( RCC_SYSCLKSource ) );
;;;384        if ( RCC_SYSCLKSource != ( ( uint16_t ) ( ~RCC_CFG0_SYSCLKSW ) ) )
00000a  482f              LDR      r0,|L31.200|
00000c  4284              CMP      r4,r0
00000e  d03f              BEQ      |L31.144|
;;;385        {
;;;386    
;;;387    #if defined(SC32f11xx)||defined(SC32f12xx)
;;;388            if ( RCC_SYSCLKSource == RCC_SYSCLKSource_HIRC )
;;;389            {
;;;390                RCC->RCC_CFG0 &= ~RCC_CFG0_WAIT_Msk;
;;;391                RCC->RCC_CFG0 |= RCC_WAIT_2;
;;;392            }
;;;393    #elif defined(SC32f10xx)
;;;394        uint32_t Multioperator = 1;
000010  2601              MOVS     r6,#1
;;;395        for ( int i = 1; i <= ((RCC->PLL_CFG &0x03) + 1 ); i++ )
000012  2001              MOVS     r0,#1
000014  e001              B        |L31.26|
                  |L31.22|
;;;396        {
;;;397            Multioperator *=  2;
000016  0076              LSLS     r6,r6,#1
000018  1c40              ADDS     r0,r0,#1              ;395
                  |L31.26|
00001a  492c              LDR      r1,|L31.204|
00001c  69c9              LDR      r1,[r1,#0x1c]         ;395
00001e  0789              LSLS     r1,r1,#30             ;395
000020  0f89              LSRS     r1,r1,#30             ;395
000022  1c49              ADDS     r1,r1,#1              ;395
000024  4281              CMP      r1,r0                 ;395
000026  d2f6              BCS      |L31.22|
;;;398        }
;;;399        if ( ( ( 2 * ((RCC->PLL_CFG &0xFF00)>>8) ) / Multioperator ) >= 64 )
000028  4928              LDR      r1,|L31.204|
00002a  69c9              LDR      r1,[r1,#0x1c]
00002c  22ff              MOVS     r2,#0xff
00002e  0212              LSLS     r2,r2,#8
000030  4011              ANDS     r1,r1,r2
000032  0a09              LSRS     r1,r1,#8
000034  0048              LSLS     r0,r1,#1
000036  4631              MOV      r1,r6
000038  f7fffffe          BL       __aeabi_uidivmod
00003c  2840              CMP      r0,#0x40
00003e  d30c              BCC      |L31.90|
;;;400        {
;;;401            RCC->RCC_CFG0 &= ~RCC_CFG0_WAIT_Msk;
000040  4822              LDR      r0,|L31.204|
000042  6940              LDR      r0,[r0,#0x14]
000044  2103              MOVS     r1,#3
000046  0309              LSLS     r1,r1,#12
000048  4388              BICS     r0,r0,r1
00004a  4920              LDR      r1,|L31.204|
00004c  6148              STR      r0,[r1,#0x14]
;;;402            RCC->RCC_CFG0 |= RCC_WAIT_1;
00004e  4608              MOV      r0,r1
000050  6940              LDR      r0,[r0,#0x14]
000052  1489              ASRS     r1,r1,#18
000054  4308              ORRS     r0,r0,r1
000056  491d              LDR      r1,|L31.204|
000058  6148              STR      r0,[r1,#0x14]
                  |L31.90|
;;;403        }
;;;404    #endif
;;;405            tmpreg = RCC->RCC_CFG0;
00005a  481c              LDR      r0,|L31.204|
00005c  6945              LDR      r5,[r0,#0x14]
;;;406    
;;;407            tmpreg &= ( uint32_t ) ~ ( RCC_CFG0_SYSCLKSEL | RCC_CFG0_SYSCLKSW );
00005e  2107              MOVS     r1,#7
000060  01c9              LSLS     r1,r1,#7
000062  4628              MOV      r0,r5
000064  4388              BICS     r0,r0,r1
000066  4605              MOV      r5,r0
;;;408    
;;;409            tmpreg |= ( uint32_t ) RCC_SYSCLKSource;
000068  4628              MOV      r0,r5
00006a  4320              ORRS     r0,r0,r4
00006c  4605              MOV      r5,r0
;;;410    
;;;411            RCC->RCC_CFG0 = tmpreg;
00006e  4817              LDR      r0,|L31.204|
000070  6145              STR      r5,[r0,#0x14]
;;;412    
;;;413            RCC->RCC_CFG0 |= RCC_CFG0_SYSCLKSW;
000072  6940              LDR      r0,[r0,#0x14]
000074  2180              MOVS     r1,#0x80
000076  4308              ORRS     r0,r0,r1
000078  4914              LDR      r1,|L31.204|
00007a  6148              STR      r0,[r1,#0x14]
;;;414    
;;;415            if ( ( RCC->RCC_CFG0 & RCC_CFG0_SYSCLKSW ) != RESET )
00007c  4608              MOV      r0,r1
00007e  6940              LDR      r0,[r0,#0x14]
000080  2180              MOVS     r1,#0x80
000082  4008              ANDS     r0,r0,r1
000084  2800              CMP      r0,#0
000086  d001              BEQ      |L31.140|
;;;416                return SUCCESS;
000088  2000              MOVS     r0,#0
                  |L31.138|
;;;417            else
;;;418                return ERROR;
;;;419        }
;;;420        else
;;;421        {
;;;422            RCC->RCC_CFG0 &= ~RCC_CFG0_WAIT_Msk;
;;;423            RCC->RCC_CFG0 |= RCC_WAIT_1;
;;;424            RCC->RCC_CFG0 &= ( uint32_t ) ~RCC_CFG0_SYSCLKSW;
;;;425    
;;;426            if ( ( RCC->RCC_CFG0 & RCC_CFG0_SYSCLKSW ) == RESET )
;;;427                return SUCCESS;
;;;428            else
;;;429                return ERROR;
;;;430        }
;;;431    }
00008a  bd70              POP      {r4-r6,pc}
                  |L31.140|
00008c  2001              MOVS     r0,#1                 ;418
00008e  e7fc              B        |L31.138|
                  |L31.144|
000090  480e              LDR      r0,|L31.204|
000092  6940              LDR      r0,[r0,#0x14]         ;422
000094  2103              MOVS     r1,#3                 ;422
000096  0309              LSLS     r1,r1,#12             ;422
000098  4388              BICS     r0,r0,r1              ;422
00009a  490c              LDR      r1,|L31.204|
00009c  6148              STR      r0,[r1,#0x14]         ;422
00009e  4608              MOV      r0,r1                 ;423
0000a0  6940              LDR      r0,[r0,#0x14]         ;423
0000a2  1489              ASRS     r1,r1,#18             ;423
0000a4  4308              ORRS     r0,r0,r1              ;423
0000a6  4909              LDR      r1,|L31.204|
0000a8  6148              STR      r0,[r1,#0x14]         ;423
0000aa  4608              MOV      r0,r1                 ;424
0000ac  6940              LDR      r0,[r0,#0x14]         ;424
0000ae  2180              MOVS     r1,#0x80              ;424
0000b0  4388              BICS     r0,r0,r1              ;424
0000b2  4906              LDR      r1,|L31.204|
0000b4  6148              STR      r0,[r1,#0x14]         ;424
0000b6  4608              MOV      r0,r1                 ;426
0000b8  6940              LDR      r0,[r0,#0x14]         ;426
0000ba  2180              MOVS     r1,#0x80              ;426
0000bc  4008              ANDS     r0,r0,r1              ;426
0000be  2800              CMP      r0,#0                 ;426
0000c0  d100              BNE      |L31.196|
0000c2  e7e2              B        |L31.138|
                  |L31.196|
0000c4  2001              MOVS     r0,#1                 ;429
0000c6  e7e0              B        |L31.138|
;;;432    
                          ENDP
                  |L31.200|
                          DCD      0x0000ff7f
                  |L31.204|
                          DCD      0x40003000
                          AREA ||i.RCC_SystickCLKConfig||, CODE, READONLY, ALIGN=2
                  RCC_SystickCLKConfig PROC
;;;1025    */
;;;1026   void RCC_SystickCLKConfig ( RCC_SysTickSource_TypeDef RCC_SysTickSource )
000000  b500              PUSH     {lr}
;;;1027   {
000002  4602              MOV      r2,r0
;;;1028   
;;;1029       
;;;1030       assert_param ( IS_RCC_SYSTICKSOURCE ( RCC_SysTickSource ) );
;;;1031   
;;;1032       if ( RCC_SysTickSource == RCC_SysTickSource_HCLK )
000004  2a01              CMP      r2,#1
000006  d106              BNE      |L32.22|
;;;1033       {
;;;1034           SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
000008  480d              LDR      r0,|L32.64|
00000a  6900              LDR      r0,[r0,#0x10]
00000c  2104              MOVS     r1,#4
00000e  4308              ORRS     r0,r0,r1
000010  490b              LDR      r1,|L32.64|
000012  6108              STR      r0,[r1,#0x10]
000014  e012              B        |L32.60|
                  |L32.22|
;;;1035       }
;;;1036       else
;;;1037       {
;;;1038           RCC_Unlock ( 0xFF );
000016  20ff              MOVS     r0,#0xff
000018  f7fffffe          BL       RCC_Unlock
;;;1039           SysTick->CTRL &= ~SysTick_CTRL_CLKSOURCE_Msk;
00001c  4808              LDR      r0,|L32.64|
00001e  6900              LDR      r0,[r0,#0x10]
000020  2104              MOVS     r1,#4
000022  4388              BICS     r0,r0,r1
000024  4906              LDR      r1,|L32.64|
000026  6108              STR      r0,[r1,#0x10]
;;;1040           RCC->RCC_CFG1 &= ~ ( ( uint32_t ) RCC_CFG1_STCLKSEL );
000028  4806              LDR      r0,|L32.68|
00002a  6980              LDR      r0,[r0,#0x18]
00002c  2160              MOVS     r1,#0x60
00002e  4388              BICS     r0,r0,r1
000030  4904              LDR      r1,|L32.68|
000032  6188              STR      r0,[r1,#0x18]
;;;1041           RCC->RCC_CFG1 |= ( uint32_t ) ( RCC_SysTickSource );
000034  4608              MOV      r0,r1
000036  6980              LDR      r0,[r0,#0x18]
000038  4310              ORRS     r0,r0,r2
00003a  6188              STR      r0,[r1,#0x18]
                  |L32.60|
;;;1042       }
;;;1043   }
00003c  bd00              POP      {pc}
;;;1044   
;;;1064   void RCC_SystickCmd ( FunctionalState NewState )
000000  2800              CMP      r0,#0
;;;1065   {
;;;1066       
;;;1067       assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;1068   
;;;1069       if ( NewState != DISABLE )
000002  d006              BEQ      |L33.18|
;;;1070       {
;;;1071           SysTick->CTRL |= ( uint32_t ) ( SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk ); 
000004  4906              LDR      r1,|L33.32|
000006  6909              LDR      r1,[r1,#0x10]
000008  2203              MOVS     r2,#3
00000a  4311              ORRS     r1,r1,r2
00000c  4a04              LDR      r2,|L33.32|
00000e  6111              STR      r1,[r2,#0x10]
000010  e005              B        |L33.30|
                  |L33.18|
;;;1072       }
;;;1073       else
;;;1074       {
;;;1075           SysTick->CTRL &= ~ ( uint32_t ) ( SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk );
000012  4903              LDR      r1,|L33.32|
000014  6909              LDR      r1,[r1,#0x10]
000016  0889              LSRS     r1,r1,#2
000018  0089              LSLS     r1,r1,#2
00001a  4a01              LDR      r2,|L33.32|
00001c  6111              STR      r1,[r2,#0x10]
                  |L33.30|
;;;1076       }
;;;1077   }
00001e  4770              BX       lr
;;;1078   
;;;1085   FlagStatus RCC_SystickGetFlagStatus ( void )
000000  4805              LDR      r0,|L34.24|
;;;1086   {
;;;1087       if ( ( SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk ) != ( uint32_t ) RESET )
000002  6900              LDR      r0,[r0,#0x10]
000004  2101              MOVS     r1,#1
000006  0409              LSLS     r1,r1,#16
000008  4008              ANDS     r0,r0,r1
00000a  2800              CMP      r0,#0
00000c  d001              BEQ      |L34.18|
;;;1088       {
;;;1089           return ( SET );
00000e  2001              MOVS     r0,#1
                  |L34.16|
;;;1090       }
;;;1091       return ( RESET );
;;;1092   }
000010  4770              BX       lr
                  |L34.18|
000012  2000              MOVS     r0,#0                 ;1091
000014  e7fc              B        |L34.16|
;;;1093   
;;;1049   void RCC_SystickSetCounter ( uint32_t Counter )
000000  1e41              SUBS     r1,r0,#1
;;;1050   {
;;;1051       if ( ( Counter - 1UL ) <= SysTick_LOAD_RELOAD_Msk ) 
000002  4a04              LDR      r2,|L35.20|
000004  4291              CMP      r1,r2
000006  d803              BHI      |L35.16|
;;;1052       {
;;;1053           SysTick->LOAD = ( uint32_t ) ( Counter - 1UL ); 
000008  4a03              LDR      r2,|L35.24|
00000a  6151              STR      r1,[r2,#0x14]
;;;1054           SysTick->VAL  = 0UL;   
00000c  2100              MOVS     r1,#0
00000e  6191              STR      r1,[r2,#0x18]
                  |L35.16|
;;;1055       }
;;;1056   }
000010  4770              BX       lr
;;;1057   
;;;77     ErrorStatus RCC_Unlock ( uint8_t TimeLimit )
000000  4601              MOV      r1,r0
;;;78     {
;;;79         if ( TimeLimit >= 0x40 )
000002  2940              CMP      r1,#0x40
000004  db03              BLT      |L36.14|
;;;80         {
;;;81             RCC->RCC_KEY = TimeLimit;
000006  4803              LDR      r0,|L36.20|
000008  60c1              STR      r1,[r0,#0xc]
;;;82             return SUCCESS;
00000a  2000              MOVS     r0,#0
                  |L36.12|
;;;83         }
;;;84         else
;;;85         {
;;;86             return ERROR;
;;;87         }
;;;88     }
00000c  4770              BX       lr
                  |L36.14|
00000e  2001              MOVS     r0,#1                 ;86
000010  e7fc              B        |L36.12|
;;;89     
                          ENDP
000012  0000              DCW      0x0000
                  |L36.20|
                          DCD      0x40003000
                          AREA ||i.RCC_WaitConfig||, CODE, READONLY, ALIGN=2
                  RCC_WaitConfig PROC
;;;635     */
;;;636    void RCC_WaitConfig ( RCC_Wait_TypeDef RCC_Wait )
000000  b500              PUSH     {lr}
;;;637    {
000002  4602              MOV      r2,r0
;;;638        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;639        
;;;640        assert_param ( IS_RCC_Wait ( RCC_Wait ) );
;;;641    
;;;642        RCC->RCC_CFG0 &= ~RCC_CFG0_WAIT_Msk;
00000a  4806              LDR      r0,|L37.36|
00000c  6940              LDR      r0,[r0,#0x14]
00000e  2103              MOVS     r1,#3
000010  0309              LSLS     r1,r1,#12
000012  4388              BICS     r0,r0,r1
000014  4903              LDR      r1,|L37.36|
000016  6148              STR      r0,[r1,#0x14]
;;;643        RCC->RCC_CFG0 |= RCC_Wait;
000018  4608              MOV      r0,r1
00001a  6940              LDR      r0,[r0,#0x14]
00001c  4310              ORRS     r0,r0,r2
00001e  6148              STR      r0,[r1,#0x14]
;;;644    
;;;645    }
000020  bd00              POP      {pc}
;;;646    /** @defgroup RCC_Group3 Peripheral clocks configuration functions
                          ENDP
000022  0000              DCW      0x0000
                  |L37.36|
                          DCD      0x40003000
;*** Start embedded assembler ***
#line 1 "..\\FWLib\\SC32F1XXX_Lib\\src\\sc32f1xxx_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_sc32f1xxx_rcc_c_49e27980____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___15_sc32f1xxx_rcc_c_49e27980____REV16| PROC
#line 464
 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_sc32f1xxx_rcc_c_49e27980____REVSH|
#line 478
|__asm___15_sc32f1xxx_rcc_c_49e27980____REVSH| PROC
#line 479
 revsh r0, r0
 bx lr
	ENDP
;*** End   embedded assembler ***
